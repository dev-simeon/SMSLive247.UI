@attribute [CascadingTypeParameter(nameof(TItem))]
@typeparam TItem

@if (Columns == null)
{
<p><em>No columns were specified for Table component</em></p>
}
else
{
<table class="table table-hover align-middle mb-0">
    <thead class="table-primary bg-primary-subtle">
        <tr>
            @Columns(default)
        </tr>
    </thead>
    <tbody>
        @if (IsLoading())
        {
            <tr>
                <td colspan="20">
                    <Loading BoolCheck="false"></Loading>
                </td>
            </tr> 
        }
        else if (items == null)
        {
            <tr>
                <td colspan="20">
                    <span class="badge text-bg-info">NULL items </span>
                </td>
            </tr>
        }

        else if (items.Count == 0)
        {
            <tr>
                <td colspan="20">
                    <span class="badge text-bg-info">@EmptyMessage</span>
                </td>
            </tr>
        }
        else
        {
            @foreach (TItem item in items)
            {
            <tr class="@GetSelectedCss(item)" @onclick="e => ToggleRow(item)">
                <CascadingValue Value="item">
                    @Columns(item)
                </CascadingValue>
            </tr>
            }
        }
    </tbody>
</table>
}

<style>
    .table {
        cursor: default !important;
        width: 100%;
    }

    .table th {
        text-transform: uppercase;
        font-weight: 500;
    }

    .table td {
        min-height: 200px !important;
    }

    .table-select-row td {
        background-color: navy !important;
        color: white !important;
    }
</style>

@code {
    [Parameter] public IList<TItem>? Items { get; set; }
    [Parameter] public ApiDataSource<TItem>? DataSource { get; set; }
    [Parameter] public RenderFragment<TItem?>? Columns { get; set; }

    [Parameter] public string? EmptyMessage { get; set; } = "No items found";
    [Parameter] public bool AllowSelect { get; set; } = true;
    [Parameter] public bool SelectMultiple { get; set; } = false;
    [Parameter] public EventCallback<TItem> OnSelectedItemChanged { get; set; }

    private IList<TItem>? items;

    protected override void OnParametersSet()
    {
        // if (DataSource == null && Items == null)
        //     throw new InvalidOperationException("Please set either DataSource or Items properties");

        if (DataSource != null && Items != null)
            throw new InvalidOperationException("You should set only one of DataSource and Items properties");

        if (DataSource != null)
            items = DataSource.Items;

        if (Items != null)
            items = Items;

        base.OnParametersSet();
    }

    [MemberNotNullWhen(false, nameof(items))]
    private bool IsLoading()
    {
        if (DataSource != null)
            return DataSource.IsLoading;

        return items == null;
    }

    private async Task ToggleRow(TItem item)
    {
        if (AllowSelect == false)
            return;

        if (SelectedItems.Contains(item))
        {
            SelectedItems.Remove(item);
            return;
        }

        if (!SelectMultiple) //only one allowed
            SelectedItems.Clear();

        SelectedItems.Add(item);
        await OnSelectedItemChanged.InvokeAsync(item);
    }

    private string? GetSelectedCss(TItem item)
    {
        if (AllowSelect && SelectedItems.Contains(item))
            return "table-select-row";
        return null;
    }

    //Public Properties
    public List<TItem> SelectedItems { get; private set; } = [];
}
