<div class="d-flex flex-column flex-fill">
    <!-- Header area (search + select all) - stays visible -->
    <div class="mb-2">
        <input class="form-control mb-2 w-50"
               type="text" placeholder="Search..."
               @oninput="OnSearchChanged" />

        <div class="form-check mb-1">
            <input class="form-check-input" type="checkbox"
                   @onchange="OnSelectAll" id="ct-all">
            <label class="form-check-label" for="ct-all">Select All</label>
        </div>
    </div>

    @* Results area - will take remaining vertical space and scroll internally.
       Because Modal.modal-body is already limited (min-height / max-height),
       this area won't cause the outer modal to resize on search changes. *@
    <div class="contact-results" style="flex:1 1 auto; overflow-x: hidden; overflow-y: auto;">
        @if (Contacts == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (Contacts.Count == 0)
        {
            <p>No contacts found</p>
        }
        else
        {
            <div class="row">
                @foreach (var item in Contacts.Where(x => x.Visible).OrderBy(x => x.Name))
                {
                    <div class="col-md-4">
                        <div class="form-check mb-1">
                            <input class="form-check-input" type="checkbox"
                                   value="@item.Key" checked="@item.Selected"
                                   id="ct-@item.Key" @onchange="e => OnSelect(e, item)">
                            <label class="form-check-label" for="ct-@item.Key">@item.Name</label>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public List<ContactModel> Contacts { get; set; } = [];
    [Parameter] public EventCallback OnSelected { get; set; }

    private Task OnSelectAll(ChangeEventArgs e)
    {
        var selected = (bool?)e.Value ?? false;
        Contacts.ForEach(x => x.Selected = selected);
        return OnSelected.InvokeAsync();
    }

    private Task OnSelect(ChangeEventArgs e, ContactModel contact)
    {
        contact.Selected = (bool?)e.Value ?? false;
        return OnSelected.InvokeAsync();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        var search = e.Value?.ToString();
        var noCase = StringComparison.OrdinalIgnoreCase;

        if (string.IsNullOrWhiteSpace(search))
            Contacts.ForEach(x => x.Visible = true);
        else
            Contacts.ForEach(x => x.Visible = x.Name.Contains(search, noCase));
    }
}
