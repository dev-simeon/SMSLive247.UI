@typeparam TValue
@inherits InputBase<TValue>
@using System.Linq.Expressions
@using System.Globalization

<div class="row my-3">
    <label class="form-label col-@Column">@Label</label>
    <div class="col-@(12 - Column)">
        <input class="form-control" 
               @bind="@CurrentValueAsString"
               @attributes=AdditionalAttributes />
    </div>
</div>

@code {
    [Parameter] public string? Label { get; set; }
    [Parameter] public int? Column { get; set; } = 4;
    [Parameter] public Expression<Func<TValue>>? For { get; set; }

    protected override bool TryParseValueFromString(string? value,
        [MaybeNullWhen(false)] out TValue result,
        [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (BindConverter.TryConvertTo(value, CultureInfo.InvariantCulture, out result))
        {
            validationErrorMessage = null;
            return true;
        }
        else
        {
            var parsingErrorMessage = $"The {{0}} field must be a date.";

            validationErrorMessage = string.Format(CultureInfo.InvariantCulture,
                parsingErrorMessage, DisplayName ?? FieldIdentifier.FieldName);
            return false;
        }
    }
}