<Card HeaderTitle="Sent Messages">
    <Body>
        <SearchArea>
            <LeftRight>
                <Left>
                    <SearchBox @ref="searchBox" @onclick="e => ds.LoadData(alert)">
                    </SearchBox>
                </Left>
                <Right>
                    <Button Type="Button.Style.SAVE" @onclick="e => downloadModal.Download()">
                        Download Messages
                    </Button>
                </Right>
            </LeftRight>
        </SearchArea>
        <Table DataSource="ds">
            <Columns>
                <Column Header="#"><input class="form-check-input" type="checkbox" /></Column>
                <Column Header="Sender">@context.SenderID</Column>
                <Column Header="Message">@context.MessageText</Column>
                <Column Header="Delivery Report">
                    @(context.TotalProcessed)/@(context.TotalProcessed + context.TotalFailed)<br />
                    @(context.Charged + "ç")<br />
                    @context.MessageParts page(@context.MessageText.Length)
                </Column>
                <Column Header="Time">
                    <FormatDate DateTime="@context.SubmitDate"></FormatDate>
                </Column>
                <Column Header="Action">
                    <Actions OnView="() => sentMessageView.Show((int)context.BatchID)" OnDelete="() => messageModal.Delete(context)">
                    </Actions>
                </Column>
            </Columns>
        </Table>
    </Body>
    <Footer>
        <Pager PageState="ds.PageState" OnPageChange="e => ds.SetPage(e).LoadData(alert)" />
    </Footer>
</Card>

<DownloadModal @ref="downloadModal"></DownloadModal>
<SentMessageModal @ref="messageModal"></SentMessageModal>
<SentMessageView @ref="sentMessageView"></SentMessageView>

@code {
    private SearchBox searchBox = new();
    private DownloadModal downloadModal = new();
    private SentMessageModal messageModal = new();
    private SentMessageView sentMessageView = new();
    private ApiDataSource<SmsBatchResponse> ds = new();

    protected override async Task OnInitializedAsync()
    {
        ds.Callback = new((PageState p, FilterState? f) =>
        {
            return apiClient.SmsBatchListAsync(p.PageNumber, p.PageSize, null, null);
        });

        await ds.LoadData(alert);
    }

    // private void ApplyFilter()
    // {
    //     if (string.IsNullOrWhiteSpace(searchBox.Text))
    //     {
    //         filteredItems = items;
    //     }
    //     else
    //     {
    //         filteredItems = items
    //             .Where(i => i.MessageText.Contains(searchBox.Text, StringComparison.OrdinalIgnoreCase) ||
    //                         i.SenderID.Contains(searchBox.Text, StringComparison.OrdinalIgnoreCase))
    //             .ToList();
    //     }
    // }
}
