<Card HeaderTitle="Sent Messages">
    <Body>
        <SearchArea>
            <LeftRight>
                <Left>
                    <SearchBox @ref="searchBox" @onclick="e => ds.LoadData(alert)">
                    </SearchBox>
                </Left>
                <Right>
                    <Button Type="Button.Style.SAVE" @onclick="OpenDownloadModal">
                        Download Messages
                    </Button>
                </Right>
            </LeftRight>
        </SearchArea>
        <Table DataSource="ds">
            <Columns>
                <Column Header="#"><input class="form-check-input" type="checkbox" /></Column>
                <Column Header="Sender">@context.SenderID</Column>
                <Column Header="Message">@context.MessageText</Column>
                <Column Header="Delivery Report">
                    @(context.TotalProcessed)/@(context.TotalProcessed + context.TotalFailed)<br />
                    @(context.Charged + "ç")<br />
                    @context.MessageParts page(@context.MessageText.Length)
                </Column>
                <Column Header="Time">
                    <FormatDate DateTime="@context.SubmitDate"></FormatDate>
                </Column>
                <Column Header="Action">
                    <Actions OnDelete="() => ConfirmDeleteMessage(context.BatchID)">
                    </Actions>
                </Column>
            </Columns>
        </Table>
    </Body>
    <Footer>
        <Pager PageState="ds.PageState" OnPageChange="e => ds.SetPage(e).LoadData(alert)" />
    </Footer>
</Card>

<Modal Title="Download" Hidden="@(!showDownloadFilterModal)">
    <Body>
        <FormInputDateRange Label="Select Period" @bind-Value="dateRange"></FormInputDateRange>
        <FormInputText Label="Sender ID" @bind-Value="senderId"></FormInputText>
        <div class="row my-3">
            <label class="form-label col-4">Download Type</label>
            <div class="col-8">
                <InputRadioGroup @bind-Value="downloadType">
                    @foreach (var option in radioOptions)
                    {
                        var radioId = $"radio-{option}";
                        <div class="form-check form-check-inline">
                            <InputRadio class="form-check-input" id="@radioId" Value="@option" />
                            <label class="form-check-label" for="@radioId">@option</label>
                        </div>
                    }
                </InputRadioGroup>
            </div>
        </div>
    </Body>
    <Footer>
        <Button Type="Button.Style.SAVE" @onclick="Download">
            Download
        </Button>
    </Footer>
</Modal>

@code {
    private SearchBox searchBox = new();
    private ApiDataSource<SmsBatchResponse> ds = new();
    private List<string> radioOptions = new List<string> { "Messages", "Delivery Reports" };
    private bool showDownloadFilterModal = false;
    private FormInputDateRangeValue dateRange = new();
    private string? senderId;
    private string downloadType = "Messages";

    protected override async Task OnInitializedAsync()
    {
        ds.Callback = new((PageState p, FilterState? f) =>
        {
            return apiClient.SmsBatchListAsync(p.PageNumber, p.PageSize, null, null);
        });

        await ds.LoadData(alert);
    }

    private async Task ConfirmDeleteMessage(long batchId)
    {
        bool confirmed = await alert.Confirm("Are you sure you want to delete this message?", "Confirm Deletion");
        if (confirmed)
        {
            await DeleteMessage(batchId);
        }
    }

    private async Task DeleteMessage(long batchId)
    {
        await apiClient.SmsBatchDeleteAsync((int)batchId);
        await ds.LoadData(alert);
    }

    private void OpenDownloadModal()
    {
        showDownloadFilterModal = true;
        StateHasChanged();
    }

    private void Download()
    {
        //Todo
        // Handle the filter data here and perform the download operation
        Console.WriteLine($"From Date: {dateRange.StartDate}, To Date: {dateRange.EndDate}, Sender ID: {senderId}, Download Type: {downloadType}");
        showDownloadFilterModal = false;
        StateHasChanged();
    }
}
