@using SMSLive247.UI.Pages.Accounts.Components

<Modal Size="Modal.ModalSize.XLARGE" @bind-Hidden="hideModal" Title="Delivery Report">
    <Body>
        @if (loading)
        {
            <div>loading..</div>
        }
        else
        {
            <div class="alert alert-info" role="alert">
                <h4 class="text-info">Note</h4>
                Multi-part messages (longer than 160) are repeated for each part in these statistics.
            </div>

            <div class="accordion mb-4" id="statusAccordion">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingStatus">
                        <button @onclick="ToggleAccordionVisibility" class='accordion-button @(isAccordionVisible ? "" : "collapsed") ' type="button" data-bs-toggle="collapse" data-bs-target="#collapseStatus" aria-expanded='@(isAccordionVisible ? "true" : "false")' aria-controls="collapseStatus">
                            Delivery Status Explanations
                        </button>
                    </h2>
                    <div id="collapseStatus" class="accordion-collapse collapse @(isAccordionVisible ? "show" : "")" aria-labelledby="headingStatus" data-bs-parent="#statusAccordion">
                        <div class="accordion-body">
                            <ul>
                                <li><strong>DELIVRD:</strong> Message is delivered to destination.</li>
                                <li><strong>ACCEPTD:</strong> The message was accepted by the Network server. Awaiting delivery status.</li>
                                <li><strong>EXPIRED:</strong> Message validity period has expired. (e.g., phone off or not in coverage area)</li>
                                <li><strong>UNDELIV:</strong> The message is undeliverable.</li>
                                <li><strong>REJECTD:</strong> The message was rejected.</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-3">
                    <SmallCard Caption="Messages Sent"
                               Value="@TotalMessagesSent.ToString()"
                               Icon="bi bi-envelope" />
                </div>
                <div class="col-md-3">
                    <SmallCard Caption="Credit Charged"
                               Value="@TotalCreditsCharged.ToString("#,##0.0")"
                               Icon="bi bi-credit-card" />
                </div>
                <div class="col-md-3">
                    <SmallCard Caption="Delivered Messages"
                               Value="@TotalDeliveredMessages.ToString()"
                               Icon="bi bi-check-circle" />
                </div>
                <div class="col-md-3">
                    <SmallCard Caption="Undelivered Messages"
                               Value="@TotalUndeliveredMessages.ToString()"
                               Icon="bi bi-x-circle" />
                </div>
            </div>

            <Card HeaderTitle="Sent Messages">
                <Body>
                    <Table DataSource="ds">
                        <Columns>
                            <Column Header="Recipient Number">
                                @context.PhoneNumber
                            </Column>
                            <Column Header="Delivery Status">
                                @if (context.Reports != null)
                                {
                                    @foreach (var report in context.Reports)
                                    {
                                        <span class="badge text-bg-@GetStatusCssColor(report.Status)">@report.Status</span>
                                    }
                                }
                            </Column>
                            <Column Header="Report Date">
                                @if (context.Reports != null)
                                {
                                    @foreach (var report in context.Reports)
                                    {
                                        if (report.ReportDate.HasValue)
                                        {
                                            <FormatDate DateTime="report.ReportDate.Value"></FormatDate>
                                        }
                                        else
                                        {
                                            <span class="text-muted">N/A</span>
                                        }
                                    }
                                }
                            </Column>
                            <Column Header="Unit Charged">
                                <div class="text-end text-nowrap pe-4">
                                    @if (context.CreditsCharged % 1 == 0)
                                    {
                                        @context.CreditsCharged.ToString("#,##0")
                                    }
                                    else
                                    {
                                        @context.CreditsCharged.ToString("#,##0.0")
                                    }
                                </div>
                            </Column>
                            <Column Header="SMSC Message ID">
                                @if (context.Reports != null)
                                {
                                    @foreach (var report in context.Reports)
                                    {
                                        @report.SmscID
                                    }
                                }
                            </Column>
                        </Columns>
                    </Table>
                </Body>
                <Footer>
                    <Pager PageState="ds.PageState" OnPageChange="e => ds.SetPage(e).LoadData(alert)" />
                </Footer>
            </Card>
        }
    </Body>
</Modal>

@code {
    private bool hideModal = true;

    private SmsBatchResponse messageBatch = new();
    private SearchBox searchBox = new();
    private DateRange dateRange = new();

    private ApiDataSource<SmsMessageResponse> ds = new();

    private int TotalMessagesSent;
    private decimal TotalCreditsCharged;
    private int TotalDeliveredMessages;
    private int TotalUndeliveredMessages;
    private bool isAccordionVisible = true;
    private bool loading = true;

    private async Task LoadDataAsync()
    {
        ds.Callback = new(async (PageState p, FilterState? f) =>
        {
            var response = await apiClient.SmsBatchReportsListAsync(p.PageNumber, p.PageSize, null, messageBatch.BatchID);
            CalculateSummary(response.Result);
            return response;
        });
        await ds.LoadData(alert);
        loading = false;
        StateHasChanged();
    }

    public async void Show(SmsBatchResponse smsBatch)
    {
        messageBatch = smsBatch;
        hideModal = false;
        loading = true;
        StateHasChanged();
        await LoadDataAsync();
    }

    private void ToggleAccordionVisibility()
    {
        isAccordionVisible = !isAccordionVisible;
    }

    private void CalculateSummary(ICollection<SmsMessageResponse> response)
    {
        if (response != null)
        {
            TotalMessagesSent = response.Count();
            TotalDeliveredMessages = response.Sum(r => r.Reports.Count(report => report.Status == "DELIVRD"));
            TotalUndeliveredMessages = response.Sum(r => r.Reports.Count(report => report.Status != "DELIVRD"));
            TotalCreditsCharged = (decimal)response.Sum(r => r.CreditsCharged);
        }
    }

    private string GetStatusCssColor(string status)
    {
        return status switch
        {
            "DELIVRD" => "success",
            "ACCEPTD" => "info",
            "UNDELIV" => "warning",
            "REJECTD" => "danger",
            _ => "secondary",
        };
    }
}
