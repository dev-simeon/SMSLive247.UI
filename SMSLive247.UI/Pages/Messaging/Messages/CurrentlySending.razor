<Card HeaderTitle="Currently Sending Messages">
    <Body>
        <SearchArea>
            <LeftRight>
                <Left>
                    @* <SearchBox @ref="searchBox" @onclick="e => ds.LoadData(alert)">
                        <select class="form-select" @onchange="FilterStatusChanged">
                            <option value="All" selected>All</option>
                            <option value="Pending">Pending</option>
                            <option value="Aborted">Aborted</option>
                        </select>
                    </SearchBox> *@
                </Left>
            </LeftRight>
        </SearchArea>
        <Table Items="items">
            <Columns>
                <Column Header="#"><input class="form-check-input" type="checkbox" /></Column>
                <Column Header="Sender ID">
                    @context.SenderID
                </Column>
                <Column Header="Message">
                    @context.MessageText
                </Column>
                <Column Header="Time of Schedule">
                    <FormatDate DateTime="@context.DateSubmitted"></FormatDate>
                </Column>
                <Column>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-success" @onclick="() => SendNow(context.BatchID)">Send Now</button>
                        <button type="button" class="btn btn-danger" @onclick="() => AbortMessage(context.BatchID)">Abort</button>
                    </div>
                </Column>
            </Columns>
        </Table>
    </Body>
</Card>

@code {
    private SearchBox searchBox = new();
    private List<SmsBatchResponse> items = new();
    private string selectedStatus = "All";

    protected override async Task OnInitializedAsync()
    {
        var response = await apiClient.SmsBatchPendingListAsync();

        items = response.Result.ToList();

    }

    private async Task AbortMessage(long batchId)
    {
        bool confirmed = await alert.Confirm("Are you sure you want to abort this message?", "Confirm Abortion");
        if (confirmed)
        {
            await apiClient.SmsBatchPendingAbortAsync((int)batchId);
        }
    }

    private async Task SendNow(long batchId)
    {
        bool confirmed = await alert.Confirm("Are you sure you want to send this message now?", "Confirm Send Now");
        if (confirmed)
        {
            //Todo
            // var response = await apiClient.SmsBatchGetAsync((int)batchId);
            // var requestBody = new SmsMessageRequest
            // {
            //     SenderID = response.Result.SenderID,
            //     MessageText = response.Result.MessageText,
            //     DeliveryTime = DateTime.UtcNow,
            // };
            // await apiClient.SmsMessageSendAsync(requestBody);
        }
    }

    // private async Task FilterStatusChanged(ChangeEventArgs e)
    // {
    //     selectedStatus = e.Value.ToString();
    //     await ds.LoadData(alert);
    // }
}
