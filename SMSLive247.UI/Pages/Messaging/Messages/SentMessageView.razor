<Modal Title="@title" 
       Hidden="@(!showModal)" 
       Size="Modal.ModalSize.LARGE" 
       VAlign="Modal.ModalVAlign.CENTER">
    <Body>
        <FormInputNumber Label="Batch ID" @bind-Value="message.BatchID" disabled></FormInputNumber>
        <FormInputText Label="Sender ID" @bind-Value="message.SenderID" disabled></FormInputText>
        <FormField Label="Message">
            <InputTextArea class="form-control" @bind-Value="message.MessageText" rows="5" disabled></InputTextArea>
        </FormField>
        <FormInputNumber Label="Total Processed" @bind-Value="message.TotalProcessed" disabled></FormInputNumber>
        <FormInputNumber Label="Total Failed" @bind-Value="message.TotalFailed" disabled></FormInputNumber>
        <FormInputNumber Label="Unit Charged" @bind-Value="message.Charged" disabled></FormInputNumber>
    </Body>
    <Footer>
        <Button Type="Button.Style.CANCEL" @onclick="@(e => showModal = !showModal)">Cancel</Button>
    </Footer>
</Modal>

@code {
    private string? title;
    private bool showModal = false;
    private SmsBatchResponse message = new();

    public async Task Show(int id)
    {
        try
        {
            title = $"View Message - {id.ToString()}";
            showModal = true;
            StateHasChanged();

            var response = await apiClient.SmsBatchGetAsync(id);

            if (response.StatusCode > 299)
                throw new Exception("No message was found");

            message = response.Result;
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
            showModal = false;
        }
        finally
        {
            StateHasChanged();
        }
    }
}