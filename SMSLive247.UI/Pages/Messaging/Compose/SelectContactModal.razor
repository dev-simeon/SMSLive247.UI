@typeparam TItem

<Modal Title="Select Contacts" Hidden="@isModalHidden">
    <Body>
        @if (loading)
        {
            <p>Loading...</p>
        }
        else
        {
            <input type="text" class="form-control mb-2" placeholder="Search..." @bind="searchQuery" @oninput="OnSearchChanged" />

            <div class="form-check mb-1">
                <input class="form-check-input" type="checkbox" @onchange="SelectAllChanged" checked="@selectAllChecked">
                <label class="form-check-label">Select All</label>
            </div>

            <div>
                @if (Items == null || Items.Count == 0)
                {
                    <p><em>No contact found</em></p>
                }
                else
                {
                    @foreach (var item in PagedItems)
                    {
                        <div class="form-check mb-1">
                            <input class="form-check-input" type="checkbox" value="@GetItemValue(item)" @onchange="e => OnItemSelected(e, GetItemValue(item))" checked="@selectedItems.Contains(GetItemValue(item))">
                            <label class="form-check-label">@GetItemLabel(item)</label>
                        </div>
                    }
                    @if (currentPage * pageSize < filteredItems.Count)
                    {
                        <button class="btn btn-primary mt-2" @onclick="LoadMoreItems">Load More</button>
                    }
                }
            </div>
        }
    </Body>
    <Footer>
        <Button Type="Button.Style.CUSTOM" @onclick="AppendSelectedContacts">Add Contacts</Button>
    </Footer>
</Modal>

@code {
    [Parameter] public IList<TItem> Items { get; set; }
    [Parameter] public EventCallback<List<string>> OnPhoneNumbersSelected { get; set; }

    private List<TItem> filteredItems = new();
    private List<TItem> PagedItems => filteredItems.Take(currentPage * pageSize).ToList();
    private bool loading = true;
    private bool isModalHidden = true;
    private string searchQuery = "";
    private int currentPage = 1;
    private const int pageSize = 20;
    private List<string> selectedItems = new();
    private bool selectAllChecked = false;

    protected override void OnParametersSet()
    {
        loading = false;
        FilterItems();
    }

    private void FilterItems()
    {
        filteredItems = Items.Where(item => GetItemLabel(item).Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void OnItemSelected(ChangeEventArgs e, string item)
    {
        if ((bool)e.Value)
        {
            selectedItems.Add(item);
        }
        else
        {
            selectedItems.Remove(item);
            selectAllChecked = false;
        }
    }

    private void SelectAllChanged(ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            selectedItems = new List<string>(filteredItems.Select(item => GetItemValue(item)));
        }
        else
        {
            selectedItems.Clear();
        }
        selectAllChecked = (bool)e.Value;
    }

    private void AppendSelectedContacts()
    {
        OnPhoneNumbersSelected.InvokeAsync(selectedItems);
        Close();
    }

    public void Show(List<string> currentSelectedItems)
    {
        selectedItems = currentSelectedItems;
        isModalHidden = false;
        StateHasChanged();
    }

    public void Close()
    {
        isModalHidden = true;
        StateHasChanged();
    }

    public void UpdateSelectedItems(List<string> currentSelectedItems)
    {
        selectedItems = currentSelectedItems;
        selectAllChecked = CheckIfAllSelected();
        StateHasChanged();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        FilterItems();
        currentPage = 1;
        selectAllChecked = CheckIfAllSelected();
    }

    private void LoadMoreItems()
    {
        currentPage++;
    }

    private bool CheckIfAllSelected()
    {
        return filteredItems.All(item => selectedItems.Contains(GetItemValue(item)));
    }

    private string GetItemValue(TItem item)
    {
        return item switch
        {
            BatchFileResponse batchFile => batchFile.Description,
            OpenApi.ContactResponse contact => contact.PhoneNumber,
            GroupResponse group => group.GroupName,
            _ => ""
        };
    }

    private string GetItemLabel(TItem item)
    {
        return item switch
        {
            BatchFileResponse batchFile => batchFile.Description,
            OpenApi.ContactResponse contact => $"{contact.ContactName} ({contact.PhoneNumber})",
            GroupResponse group => group.GroupName,
            _ => ""
        };
    }
}