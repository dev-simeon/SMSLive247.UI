@typeparam TItem

<Modal Title="Select Contacts" Hidden="@(!isModalVisible)">
    <Body>
        @if (loading)
        {
            <p>Loading...</p>
        }
        else
        {
            <input type="text" class="form-control mb-2" placeholder="Search..." @bind="searchQuery" @oninput="OnSearchChanged" />

            <div class="form-check mb-1">
                <input class="form-check-input" type="checkbox" @onchange="SelectAllChanged" checked="@selectAllChecked">
                <label class="form-check-label">Select All</label>
            </div>

            <div>
                @if (contactSelection == "Bulk Files")
                {
                    @foreach (var bulkFile in PagedItems.OfType<BatchFileResponse>())
                    {
                        <div class="form-check mb-1">
                            <input class="form-check-input" type="checkbox" value="@bulkFile.Description" @onchange="e => OnItemSelected(e, bulkFile.Description)" checked="@selectedItems.Contains(bulkFile.Description)">
                            <label class="form-check-label" for="bulkFile_@bulkFile.BatchFileID">@bulkFile.Description</label>
                        </div>
                    }
                }
                else if (contactSelection == "All Contacts")
                {
                    @foreach (var contact in PagedItems.OfType<OpenApi.ContactResponse>())
                    {
                        <div class="form-check mb-1">
                            <input class="form-check-input" type="checkbox" value="@contact.PhoneNumber" @onchange="e => OnItemSelected(e, contact.PhoneNumber)" checked="@selectedItems.Contains(contact.PhoneNumber)">
                            <label class="form-check-label" for="contact_@contact.ContactName">@contact.ContactName<span> (@contact.PhoneNumber)</span></label>
                        </div>
                    }
                }
                else if (contactSelection == "Groups")
                {
                    @foreach (var group in PagedItems.OfType<string>())
                    {
                        <div class="form-check mb-1">
                            <input class="form-check-input" type="checkbox" value="@group" @onchange="e => OnItemSelected(e, group)" checked="@selectedItems.Contains(group)">
                            <label class="form-check-label">@group</label>
                        </div>
                    }
                }
            </div>

            @if (HasMoreItems)
            {
                <button class="btn btn-link" @onclick="LoadMore">Load More</button>
            }
        }
    </Body>
    <Footer>
        <Button Type="Button.Style.DEFAULT" @onclick="AppendSelectedContacts">Add Contacts</Button>
    </Footer>
</Modal>

@code {
    [Parameter] public string contactSelection { get; set; }
    [Parameter] public EventCallback<HashSet<string>> OnPhoneNumbersSelected { get; set; }

    private List<object> allItems = new();
    private List<object> filteredItems = new();
    private List<object> PagedItems => filteredItems.Take(currentPage * pageSize).ToList();
    private bool loading = true;
    private bool isModalVisible = false;
    private string searchQuery = "";
    private int currentPage = 1;
    private const int pageSize = 20;
    private HashSet<string> selectedItems = new HashSet<string>();
    private bool selectAllChecked = false;

    protected override async Task OnParametersSetAsync()
    {
        loading = true;

        allItems.Clear();

        // Simulate loading data
        if (contactSelection == "Bulk Files")
        {
            for (int i = 1; i <= 50; i++)
            {
                allItems.Add(new BatchFileResponse
                {
                    BatchFileID = $"BulkFile{i}",
                    Description = $"Bulk File {i}",
                    FileType = "txt",
                    TotalNumbers = i * 10
                });
            }
        }
        else if (contactSelection == "All Contacts")
        {
            for (int i = 1; i <= 500; i++)
            {
                allItems.Add(new OpenApi.ContactResponse
                {
                    ContactName = $"Contact {i}",
                    PhoneNumber = $"+123456789{i:D3}"
                });
            }
        }
        else if (contactSelection == "Groups")
        {
            for (int i = 1; i <= 20; i++)
            {
                allItems.Add($"Group {i}");
            }
        }

        filteredItems = allItems;
        loading = false;
    }

    private void OnItemSelected(ChangeEventArgs e, string item)
    {
        if ((bool)e.Value)
        {
            selectedItems.Add(item);
        }
        else
        {
            selectedItems.Remove(item);
            selectAllChecked = false;
        }
    }

    private void SelectAllChanged(ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            selectedItems = new HashSet<string>(filteredItems.Select(item => item.ToString()));
        }
        else
        {
            selectedItems.Clear();
        }
        selectAllChecked = (bool)e.Value;
    }

    private bool CheckIfAllSelected()
    {
        return filteredItems.All(item => selectedItems.Contains(item.ToString()));
    }

    private void AppendSelectedContacts()
    {
        OnPhoneNumbersSelected.InvokeAsync(selectedItems);
        Close();
    }

    public void Show(string contactSelection, HashSet<string> currentSelectedItems)
    {
        this.contactSelection = contactSelection;
        selectedItems = currentSelectedItems;
        isModalVisible = true;
        StateHasChanged();
    }

    public void Close()
    {
        isModalVisible = false;
        StateHasChanged();
    }

    public void UpdateSelectedItems(HashSet<string> currentSelectedItems)
    {
        selectedItems = currentSelectedItems;
        selectAllChecked = CheckIfAllSelected();
        StateHasChanged();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        filteredItems = allItems.Where(item => item.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        currentPage = 1;
        selectAllChecked = CheckIfAllSelected();
    }

    private void LoadMore()
    {
        currentPage++;
    }

    private bool HasMoreItems => filteredItems.Count > PagedItems.Count;
}
