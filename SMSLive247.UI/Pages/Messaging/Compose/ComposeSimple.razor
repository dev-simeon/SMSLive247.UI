<section class="d-flex gap-4">
    <div class="w-50">
        <Card HeaderTitle="Compose SMS">
            <Body>
                <EditForm Model="model" OnSubmit="SubmitSms">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="senderId" class="form-label">Sender ID</label>
                        <InputSelect id="senderId" class="form-select w-75" @bind-Value="model.SenderID">
                            <option value="" selected>Select Sender ID</option>
                            @foreach (var sender in senderIds)
                            {
                                <option value="@sender.SenderID">@sender.SenderID</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label for="numbers" class="form-label">Recipient Phone Numbers</label>
                        <InputTextArea id="numbers" class="form-control w-75" @bind-Value="model.MobileNumber" rows="5" placeholder="Comma separated list"></InputTextArea>
                        <div class="mt-1 d-flex gap-4">
                            <label class="form-label">Select From</label>
                            <div>
                                <InputRadioGroup Value="contactSelection"
                                                 ValueExpression="@(() => contactSelection)"
                                                 ValueChanged="@((string value) => ShowModal(value))">
                                    @foreach (var option in contactOptions)
                                    {
                                        var radioId = $"radio-{option}";
                                        <div class="form-check form-check-inline">
                                            <InputRadio class="form-check-input" id="@radioId" Value="@option" />
                                            <label class="form-check-label" for="@radioId">@option</label>
                                        </div>
                                    }
                                </InputRadioGroup>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3 w-75">
                        <div class="d-flex justify-content-between">
                            <label for="message" class="form-label">Message</label>
                            <button class="btn btn-link btn-sm text-decoration-none" @onclick="ClearMessage">Clear Message</button>
                        </div>
                        <InputTextArea id="message" class="form-control" @bind-Value="model.MessageText" @oninput="HandleMessageInput" rows="5"></InputTextArea>
                        <div>@_messageCounter</div>
                    </div>

                    <div class="mb-3">
                        <InputRadioGroup @bind-Value="sendOption">
                            @foreach (var option in sendOptions)
                            {
                                var radioId = $"radio-{option}";
                                <div class="form-check form-check-inline">
                                    <InputRadio class="form-check-input" id="@radioId" Value="@option" />
                                    <label class="form-check-label" for="@radioId">@option</label>
                                </div>
                            }
                        </InputRadioGroup>
                    </div>

                    @if (sendOption == "Schedule for Later")
                    {
                        <div class="mb-3">
                            <label for="schedule" class="form-label">Delivery Time</label>
                            <InputDate id="schedule" Type="InputDateType.DateTimeLocal" class="form-control w-75" @bind-Value="model.DeliveryTime" required />
                        </div>
                    }

                    <Button Type="Button.Style.CUSTOM">Send SMS</Button>
                </EditForm>
            </Body>
        </Card>
    </div>
    <!-- Selected Contacts Badges -->
    @if (selectedContacts.Count > 0)
    {
        <div class="w-50">
            <Card HeaderTitle="Selected Contacts">
                <Body>
                    <div class="row g-1 row-gap-1">
                        @foreach (var contact in selectedContacts)
                        {
                            <div class="col-auto">
                                <span class="d-flex align-items-center gap-1 badge bg-primary">
                                    @contact
                                    <button type="button" class="btn-close btn-close-white btn-sm" aria-label="Close" @onclick="() => RemoveContact(contact)"></button>
                                </span>
                            </div>
                        }
                    </div>

                </Body>
            </Card>
        </div>
    }
</section>
<SelectContactModal TItem="string" @ref="modal" OnPhoneNumbersSelected="AddPhoneNumbers"></SelectContactModal>

@code {
    private SmsMessageRequest model = new();
    private List<SenderIdResponse> senderIds = new();
    private List<string> contactOptions = new List<string> { "Bulk Files", "Groups", "All Contacts" };
    private string contactSelection = string.Empty;
    private List<string> sendOptions = new List<string> { "Send Immediately", "Schedule for Later" };
    private string sendOption = "Send Immediately";
    private SelectContactModal<string> modal = new();
    private HashSet<string> selectedContacts = new();
    private HashSet<string> selectedGroupsAndBulkFiles = new();
    private string _messageCounter = "";
    private const int _smsMaxLength = 1600; // Max SMS length
    private const int _smsAdLength = 0; // Any additional characters added to SMS (e.g., footer)

    protected override async Task OnInitializedAsync()
    {
        var senderResponse = await apiClient.SenderIdListAsync(1, 500);
        if (senderResponse.StatusCode == 200)
        {
            senderIds = senderResponse.Result.ToList();
        }
    }

    private async Task SubmitSms()
    {
        if (sendOption == "Send Immediately")
        {
            model.DeliveryTime = DateTime.UtcNow;
        }

        await apiClient.SmsMessageSendAsync(model);
    }

    private void ClearMessage()
    {
        model.MessageText = string.Empty;
        _messageCounter = string.Empty;
    }

    private void ShowModal(string value)
    {
        contactSelection = value;
        modal.Show(contactSelection, selectedContacts);
    }

    private void AddPhoneNumbers(HashSet<string> numbers)
    {
        selectedContacts = numbers;
        model.MobileNumber = string.Join(", ", selectedContacts);
        contactSelection = string.Empty;
        StateHasChanged();
    }

    private void RemoveContact(string contact)
    {
        selectedContacts.Remove(contact);
        model.MobileNumber = string.Join(", ", selectedContacts);
        modal.UpdateSelectedItems(selectedContacts);
        StateHasChanged();
    }

    private async Task HandleMessageInput(ChangeEventArgs e)
    {
        var strSmsText = e.Value?.ToString();
        int intSMSLen = strSmsText!.GetValidGsmTextLength() + _smsAdLength;

        if (strSmsText?.Length < 1)
        {
            _messageCounter = "";
            return;
        }

        if (intSMSLen > _smsMaxLength)
        {
            model.MessageText = strSmsText!.Substring(0, _smsMaxLength - _smsAdLength);
            await alert.Info("Maximum SMS characters reached!", "alert");
            return;
        }

        int intNextMax, intSmsParts, intPrevMax;
        if (intSMSLen <= 160)
        {
            intSmsParts = 1; intNextMax = 160; intPrevMax = 0;
        }
        else
        {
            intSmsParts = (int)Math.Ceiling(intSMSLen / 153m);
            intNextMax = intSmsParts * 153;
            intPrevMax = intNextMax - 153;
            if (intPrevMax < 160)
            {
                intPrevMax = 160;
            }
        }

        if (intSMSLen > 0)
        {
            _messageCounter = intSMSLen + "/" + intNextMax + " . . . Cost: " + intSmsParts + " SMS";
            if ((intPrevMax > 0) && (intSMSLen == (intPrevMax + 1)))
            {
                await alert.Info($"You have just exceeded {intPrevMax}. You will be charged {intSmsParts} credits for this message!", "alert");
            }
        }
    }
}