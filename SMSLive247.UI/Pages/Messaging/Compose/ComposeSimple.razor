@inject Settings settings;

<Card HeaderTitle="Compose SMS">
    <Body>
        <MultiColumn Column1Width="5" Column2Width="7">
            <Column1>
                <div class="mb-4 mt-3">
                    @* <label class="form-label" for="s1">Sender ID</label> *@
                    <div class="input-group">
                        <span class="input-group-text">Sender ID</span>
                        <InputSelect class="form-select" id="s1" @bind-Value="model.SenderID">
                            <option>Please select Sender ID</option>
                            @foreach (var sender in senderIds)
                            {
                                <option value="@sender.SenderID">@sender.SenderID</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-text">You can request for more SenderIDs here</div>
                </div>

                <div class="mb-4">
                    <div class="d-flex justify-content-between">
                        <label class="form-label" for="m2">@counterText</label>
                        <button class="btn btn-close btn-sm" title="Clear Message" @onclick="ClearMessage"></button>
                    </div>
                    <textarea class="form-control" id="m2" rows="5" @bind="model.MessageText" maxlength="@settings.MaxCharacter" @oninput="OnTextChange"></textarea>
                    <div class="form-text">Messages longer than 160 characters are charged per each page</div>
                </div>

                <div class="mb-4">
                    <InputRadioGroup @bind-Value="sendOption">
                        <div class="form-check form-check-inline">
                            <InputRadio class="form-check-input" id="r3" Value=@SendOption.SEND_NOW />
                            <label class="form-check-label" for="r3">Send Immediately</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <InputRadio class="form-check-input" id="r4" Value=@SendOption.SEND_LATER />
                            <label class="form-check-label" for="r4">Schedule for Later</label>
                        </div>
                    </InputRadioGroup>
                </div>

                @if (sendOption == SendOption.SEND_LATER)
                {
                <div class="mb-4">
                    @* <label class="form-label" for="s5">Delivery Time</label> *@
                    <div class="input-group">
                        <span class="input-group-text">Delivery Time</span>
                        <InputDate class="form-control" id="s5" Type="InputDateType.DateTimeLocal" @bind-Value="model.DeliveryTime" required />
                    </div>
                    <div class="form-text">Your time zone is: West/Central Africa GMT +1</div>
                </div>
                }
            </Column1>
            <Column2>
                <div style="height: 480px; overflow-y: auto;">
                    <h4>Recipients</h4>

                    <RecipientList Caption="Raw Numbers" Items="rawNumbers" @onclick="e => rawNumberModal.Show()">
                        <button type="button" class="btn btn-outline-primary"
                                @onclick="e => rawNumberModal.Show()">
                            <i class="fa fa-paste me-2"></i>Paste...
                        </button>
                        <p class="form-text">
                            Type or paste your recipients phone numbers. Click the [Paste] button above.
                        </p>
                    </RecipientList>

                    <RecipientList Caption="From Contacts" Items="contactsAndGroups" @onclick="e => contactsAndGroupsModal.Show()">
                        <button type="button" class="btn btn-outline-primary"
                                @onclick="e => contactsAndGroupsModal.Show()">
                            <i class="fa fa-user me-2"></i>Contacts...
                        </button>
                        <p class="form-text">
                            You can also select numbers from your Phonebook or Groups. Click the [Contacts] button above.
                        </p>
                    </RecipientList>

                    <RecipientList Caption="From Bulk Files" Items="batchFiles" @onclick="e => bulkFileModal.Show()">
                        <button type="button" class="btn btn-outline-primary"
                                @onclick="e => bulkFileModal.Show()">
                            <i class="fa fa-book me-2"></i>Bulk Files...
                        </button>
                        <p class="form-text">
                            You may also include your Batch Files numbers. Click the [Bulk File] button above.
                        </p>
                    </RecipientList>
                </div>
            </Column2>
        </MultiColumn>
    </Body>
    <Footer>
        <Button Type="Button.Style.CUSTOM" @onclick="SubmitMessage">
            @(sendOption == SendOption.SEND_NOW ? "Send SMS Now!" : "Queue Message")
        </Button>
    </Footer>
</Card>


<BulkFilesModal @ref="bulkFileModal" Items="batchFiles" OnSelected="OnSelected" />
<RawNumberModal @ref="rawNumberModal" RawNumbers="rawNumbers" OnSelected="OnSelected" />
<ContactsAndGroupsModal @ref="contactsAndGroupsModal" Items="contactsAndGroups" OnSelected="OnSelected" />

@code {
    private enum SendOption { SEND_NOW, SEND_LATER }

    private BulkFilesModal bulkFileModal = new();
    private RawNumberModal rawNumberModal = new();
    private ContactsAndGroupsModal contactsAndGroupsModal = new();

    private List<SenderIdResponse> senderIds = new();
    private List<ContactModel> batchFiles = new();
    private List<ContactModel> contacts = new();
    private List<ContactModel> groups = new();
    private List<ContactModel> rawNumbers = new();
    private List<ContactModel> contactsAndGroups = new();

    private SmsBatchRequest model = new();
    private string counterText = "Type your Message here";
    private SendOption sendOption = SendOption.SEND_NOW;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            model.DeliveryTime = DateTime.Now;

            var t1 = apiClient.SenderIdListAsync(1, 500);
            var t2 = apiClient.BatchFileListAsync();
            var t3 = apiClient.ContactListAsync();
            var t4 = apiClient.GroupListAsync();

            await Task.WhenAll(t1, t2, t3, t4);

            senderIds = t1.Result.Result.ToList();
            batchFiles = t2.Result.Result.Select(x => ToContact(x)).ToList();
            contacts = t3.Result.Result.Select(x => ToContact(x)).ToList();
            groups = t4.Result.Result.Select(x => ToContact(x)).ToList();

            contactsAndGroups = contacts.Concat(groups).ToList();
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private async Task SubmitMessage()
    {
        if (sendOption == SendOption.SEND_NOW) model.DeliveryTime = null;
        model.PhoneNumbers = contactsAndGroups.Where(x => x.Selected).Select(x => x.Key).ToList();
        model.BatchFileIDs = batchFiles.Where(x => x.Selected).Select(x => x.Key).ToList();
        model.RawNumbers = string.Join(",", rawNumbers.Where(x => x.Selected).Select(x => x.Key));

        await apiClient.SmsBatchCreateAsync(model);
    }

    private void ClearMessage()
    {
        model.MessageText = string.Empty;
        counterText = "Type your Message here";
    }

    private void OnSelected()
    {
        StateHasChanged();
    }

    private async Task OnTextChange(ChangeEventArgs e)
    {
        var strSmsText = e.Value?.ToString();

        if (string.IsNullOrWhiteSpace(strSmsText))
        {
            counterText = "Type your Message here";
            return;
        }

        int intSmsLength = strSmsText.GetValidGsmTextLength();
        int intSmsParts = GetMessageParts(intSmsLength);
        int intNextMax = intSmsParts == 1 ? 160 : intSmsParts * 153;

        if (intSmsParts > settings.SmsMaxParts)
        {
            await alert.Info("Maximum SMS characters reached!", "alert");
            return;
        }

        if (intSmsParts > 1)
        {
            if (intSmsLength == 161)
                await alert.Info($"You have just exceeded 160 characters. You will be charged {intSmsParts} pages for this message!", "alert");

            if (intSmsLength == intNextMax - 153 + 1)
                await alert.Info($"You have just exceeded {intNextMax - 153} characters. You will be charged {intSmsParts} pages for this message!", "alert");
        }
        counterText = $"{intSmsLength} / {intNextMax} . . . . . . {intSmsParts} page{(intSmsParts > 1 ? "s" : null)}";
    }

    private static int GetMessageParts(int length)
    {
        if (length <= 160) return 1;

        return (int)Math.Ceiling(length / 153.0);
    }

    private static ContactModel ToContact(object item)
    {
        return item switch
        {
            BatchFileResponse b =>
                new ContactModel(b.BatchFileID, $"{b.Description} ({b.TotalNumbers})", b.TotalNumbers),
            ContactResponse c => new ContactModel(c.PhoneNumber, c.ContactName, 1),
            GroupResponse g => new ContactModel(g.GroupName, $"{g.GroupName} ({g.Members.Count})", g.Members.Count),
            _ => throw new ArgumentException("Not supported contact type", nameof(item))
        };
    }
}
