<Modal Title="Select Contacts and Groups" @bind-Hidden="hideModal" Size="Modal.ModalSize.LARGE">
    <Body>
        <input class="w-50 form-control mb-2"
               type="text" placeholder="Search..."
               @oninput="OnSearchChanged" />

        <div class="form-check mb-1">
            <input class="form-check-input" type="checkbox"
                   @onchange="OnSelectAll" id="x-@id-all">
            <label class="form-check-label" for="x-@id-all">Select All</label>
        </div>

        <div class="row">
            @if (Items == null)
            {
                <p><em>Loading...</em></p>
            }
            else if (Items.Count == 0)
            {
                <p>No contact or group found</p>
            }
            else
            {
                @foreach (var item in Items.Where(x => x.Visible).OrderBy(x => x.Name))
                {
                    <div class="col-md-4">
                        <div class="form-check mb-1">
                            <input class="form-check-input" type="checkbox"
                                   value="@item.Key" checked="@item.Selected"
                                   id="x-@id-@item.Key" @onchange="e => OnSelect(item, e)">
                            <label class="form-check-label" for="x-@id-@item.Key">@item.Name</label>
                        </div>
                    </div>
                }
            }
        </div>
    </Body>
    <Footer>
        <Button Type="Button.Style.CANCEL"
                @onclick="Hide">
            Close
        </Button>
    </Footer>
</Modal>

@code {
    [Parameter] public List<ContactModel>? Items { get; set; }
    [Parameter] public EventCallback OnSelected { get; set; }

    private bool hideModal = true;
    private string id = Guid.NewGuid().ToString().Substring(1, 4);

    public void Show()
    {
        hideModal = false;
        StateHasChanged();
    }

    public void Hide()
    {
        hideModal = true;
        StateHasChanged();
    }

    public Task OnSelect(ContactModel contact, ChangeEventArgs e)
    {
        contact.Selected = (bool?)e.Value ?? false;
        return OnSelected.InvokeAsync();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        var search = e.Value?.ToString();
        var noCase = StringComparison.OrdinalIgnoreCase;

        if (string.IsNullOrWhiteSpace(search))
            Items?.ForEach(x => x.Visible = true);
        else
            Items?.ForEach(x => x.Visible = x.Name.Contains(search, noCase));
    }

    private Task OnSelectAll(ChangeEventArgs e)
    {
        var selected = (bool?)e.Value ?? false;
        Items?.ForEach(x => x.Selected = selected);
        return OnSelected.InvokeAsync();
    }
}
