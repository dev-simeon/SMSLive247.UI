@using CsvHelper
@using CsvHelper.Configuration
@using SMSLive247.UI.Pages.Messaging.Contacts.Modals
@using System.Globalization
@using System.Text.RegularExpressions
@inject Settings settings;

<style>
    .step-wrapper {
        display: none;
    }

        .step-wrapper.active {
            display: block;
        }

    .step-indicator {
        display: table;
        table-layout: fixed;
        text-align: center;
        vertical-align: middle;
        padding-left: 0;
        padding-top: 20px;
    }

        .step-indicator li {
            display: table-cell;
            position: relative;
            width: 1%;
        }

            .step-indicator li:after {
                background-color: #ccc;
                content: "";
                display: block;
                height: 1px;
                position: absolute;
                width: 100%;
                top: 32px;
            }

            .step-indicator li:after {
                left: 50%;
            }

            .step-indicator li:last-child:after {
                display: none;
            }

            .step-indicator li.active .step {
                border-color: #4183d7;
                color: #4183d7;
            }

            .step-indicator li.active .caption {
                color: #4183d7;
            }

            .step-indicator li.complete:after {
                background-color: #e95420;
            }

            .step-indicator li.complete .step {
                border-color: #e95420;
                color: #e95420;
            }

            .step-indicator li.complete .caption {
                color: #e95420;
            }

    .step {
        background-color: #fff;
        border-radius: 50%;
        border: 1px solid #d9d9d9;
        font-size: 24px;
        height: 64px;
        line-height: 64px;
        margin: 0 auto;
        position: relative;
        width: 64px;
        z-index: 1;
    }

        .step:hover {
            cursor: pointer;
        }

    .table-container {
        max-height: 25rem;
        overflow-y: auto;
        margin-bottom: 1rem;
    }
</style>



<div class="container">
    <!-- Step Indicators -->
    <ol class="step-indicator">
        @foreach (var step in Steps)
        {
            <li class="@(step == CurrentStep ? "active" : "") @(Steps.IndexOf(step) < Steps.IndexOf(CurrentStep) ? "complete" : "")">
                @if (Steps.IndexOf(step) == 0)
                {
                    <div class="step"><i class="fa fa-file"></i></div>
                }
                else if (Steps.IndexOf(step) == 1)
                {
                    <div class="step"><i class="fa fa-comment"></i></div>
                }
                else
                {
                    <div class="step"><i class="fa fa-paper-plane"></i></div>
                }

                <div class="caption hidden-xs hidden-sm py-2 px-3">Step @(Steps.IndexOf(step) + 1): @step.Title</div>
            </li>
        }
    </ol>

    <!-- Combined Step 1: Select CSV File and Preview Content -->
    <div class="step-wrapper @(IsFirstStep ? "active" : "")">
        @if (CurrentStep == Steps[0])
        {
            <div>
                <h3>@Steps[0].Title</h3>
                <a href="https://new.smslive247.com/Support/Docs/Help/Html/Template%20SMS.htm" target="_blank" class="text-decoration-none">
                    Click here for step-by-step instruction on how to setup a template SMS.
                </a>
                <Card>
                    <Body>
                        @if (!showPreview)
                        {
                            <SearchArea>
                                <LeftRight>
                                    <Left>
                                        <input type="search" class="form-control" placeholder="Search..." @bind="searchText" @oninput="e => OnSearch(e.Value?.ToString()!)" />
                                    </Left>
                                    <Right>
                                        <Button Type="Button.Style.ADD" @onclick="e => csvFileModal.Show()">
                                            Upload CSV File...
                                        </Button>
                                    </Right>
                                </LeftRight>
                            </SearchArea>
                            <Table Items="filteredItems">
                                <Columns>
                                    <Column Width="15">
                                        <input type="radio" name="file" @onclick="e => SelectFile(context)">
                                    </Column>
                                    <Column Header="File Name" Width="45%">@context.Description</Column>
                                    <Column Header="Total Numbers" Width="15%">
                                        <FormatNumber Number="@context.TotalNumbers"></FormatNumber>
                                    </Column>
                                    <Column Header="Date Uploaded">
                                        <FormatDate DateTime="@context.DateCreated"></FormatDate>
                                    </Column>
                                    <Column Header="File Type">
                                        <span class="badge text-bg-info">.@context.FileType.ToUpper()</span>
                                    </Column>
                                </Columns>
                            </Table>
                        }
                        else
                        {
                            <div class="table-container">
                                <Table Items="csvContent.Take(10).ToList()">
                                    <Columns>
                                        @foreach (var header in csvHeaders)
                                        {
                                            <Column Header="@header.Name">@context[header.Name]</Column>
                                        }
                                    </Columns>
                                </Table>
                            </div>

                            <Button Type="Button.Style.DEFAULT" @onclick="HidePreview">
                                Back to List
                            </Button>
                        }
                    </Body>
                </Card>
            </div>
        }
    </div>

    <!-- Step 2: Select Field For Recipient Numbers and Type Message -->
    <div class="step-wrapper @(CurrentStep == Steps[1] ? "active" : "")">
        @if (CurrentStep == Steps[1])
        {
            <div>
                <h3>@Steps[1].Title</h3>
                <Card HeaderTitle="Compose Message">
                    <Body>
                        <MultiColumn>
                            <Column1>
                                <EditForm Model="model" OnValidSubmit="SubmitMessage">
                                    <ValidationSummary class="text-danger" />
                                    <DataAnnotationsValidator />

                                    <FormField Label="Sender ID">
                                        <InputSelect @bind-Value="model.SenderID" class="form-select" required>
                                            <option value="">-- select sender id --</option>
                                            @foreach (var senderId in senderIdList)
                                            {
                                                <option value="@senderId">@senderId</option>
                                            }
                                        </InputSelect>
                                    </FormField>
                                    <FormField Label="Phone Number Column">
                                        <InputSelect @bind-Value="model.PhoneNumberColumn" class="form-select" required>
                                            @foreach (var header in csvHeaders)
                                            {
                                                <option value="@header.Position">@header.Name</option>
                                            }
                                        </InputSelect>
                                    </FormField>
                                    <FormField Label="Message">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-label" for="m2">@counterText</label>
                                            <button type="button" class="btn btn-close btn-sm" title="Clear Message" @onclick="ClearMessage"></button>
                                        </div>
                                        <textarea class="form-control" id="m2" rows="5" maxlength="@settings.MaxCharacter" @bind="model.MessageText" @oninput="OnTextChange" placeholder="Enter message template with placeholders like [FirstName], [AccountNumber], etc." required></textarea>
                                        <div class="form-text">
                                            Messages longer than 160 characters are charged per each page
                                        </div>
                                    </FormField>
                                    <FormInputText Label="Send Delivery Report To Email" @bind-Value="deliveryEmail"></FormInputText>
                                    <FormField Label="Send Options">
                                        <InputRadioGroup @bind-Value="sendOption">
                                            <div class="form-check-inline">
                                                <InputRadio id="sendNow" Value="@SendOption.SEND_NOW" />
                                                <label class="form-check-label" for="sendNow">Send Now</label>
                                            </div>
                                            <div class="form-check-inline">
                                                <InputRadio id="schedule" Value="@SendOption.SEND_LATER" />
                                                <label class="form-check-label" for="schedule">Schedule for Later</label>
                                            </div>
                                        </InputRadioGroup>
                                    </FormField>
                                    @if (sendOption == SendOption.SEND_LATER)
                                    {
                                        <div class="mb-4">
                                            <div class="input-group">
                                                <span class="input-group-text">Delivery Time</span>
                                                <InputDate class="form-control" id="s5" Type="InputDateType.DateTimeLocal" @bind-Value="model.DeliveryTime" />
                                            </div>
                                            <div class="form-text">Your time zone is: West/Central Africa GMT +1</div>
                                        </div>
                                    }
                                </EditForm>
                            </Column1>
                            <Column2>
                                <h6>Message Preview</h6>
                                @if (csvContent != null && csvContent.Count > 0)
                                {
                                    @if (!string.IsNullOrWhiteSpace(model.MessageText))
                                    {
                                        <Table Items="csvContent.Take(10).ToList()">
                                            <Columns>
                                                <Column Header="Recipient Number">
                                                    @context[csvContent.First().Keys.ElementAt(model.PhoneNumberColumn)]
                                                </Column>
                                                <Column Header="Message">
                                                    @ParseMessage(model.MessageText, context.ToDictionary(header => header.Key, header => (object)header.Value))
                                                </Column>
                                            </Columns>
                                        </Table>
                                    }
                                }
                            </Column2>


                        </MultiColumn>
                    </Body>
                    <Footer>
                        @if (sendOption == SendOption.SEND_NOW)
                        {
                            <button form="TemplateMessageForm" type="submit" class="btn btn-primary" @onclick="SubmitMessage">
                                <i class="fa fa-paper-plane me-2"></i>Send SMS Now!
                            </button>
                        }
                        else
                        {
                            <button form="TemplateMessageForm" type="submit" class="btn btn-primary" @onclick="SubmitMessage">
                                <i class="fa fa-clock me-2"></i>Queue Message
                            </button>
                        }
                    </Footer>
                </Card>
            </div>
        }
    </div>

    <div class="">
        <button type="button" class="btn btn-primary" @onclick="PreviousStep" disabled="@(IsFirstStep)">
            Previous
        </button>
        <button type="button" class="btn btn-primary" @onclick="NextStep" disabled="@(CurrentStep == Steps[0] && !IsFileSelected || IsLastStep)">
            Next
        </button>
    </div>
</div>

<BulkFileModal @ref="csvFileModal" ForCSV="true" OnCompleted="FetchData"></BulkFileModal>


@code {
    private SmsBatchCsvRequest model = new();
    private BulkFileModal csvFileModal = new();

    private enum SendOption { SEND_NOW, SEND_LATER }

    private List<WizardStep> Steps = new()
    {
        new WizardStep { Title = "Select & Preview CSV" },
        new WizardStep { Title = "Compose Message" }
    };

    private int CurrentStepIndex { get; set; }
    private WizardStep CurrentStep => Steps[CurrentStepIndex];

    private bool IsFirstStep => CurrentStepIndex == 0;
    private bool IsLastStep => CurrentStepIndex == Steps.Count - 1;

    private string deliveryEmail = string.Empty;
    private string searchText = string.Empty;
    private bool showPreview = false;
    private List<BatchFileResponse> items = new();
    private List<BatchFileResponse> filteredItems = new();
    private List<string> senderIdList = new();
    private List<Dictionary<string, string>> csvContent = new();
    private List<Column> csvHeaders = new();
    private string counterText = "Type your Message here";
    private SendOption sendOption = SendOption.SEND_NOW;
    private BatchFileResponse selectedFile = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        try
        {
            var t1 = apiClient.BatchFileListAsync();
            var t2 = apiClient.SenderIdListAsync(1, 500);

            await Task.WhenAll(t1, t2);

            items = t1.Result.Result.Where(x => x.FileType == "csv").OrderByDescending(x => x.DateCreated).ToList();
            senderIdList = t2.Result.Result.Select(x => x.SenderID).ToList();
            filteredItems = items;
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private void NextStep()
    {
        if (CurrentStepIndex < Steps.Count - 1)
        {
            CurrentStepIndex++;
        }
    }

    private void PreviousStep()
    {
        if (CurrentStepIndex > 0)
        {
            CurrentStepIndex--;
        }
    }

    private bool IsFileSelected => selectedFile != null && !string.IsNullOrEmpty(selectedFile.BatchFileID);

    private void OnSearch(string input)
    {
        searchText = input;

        if (string.IsNullOrEmpty(searchText))
        {
            filteredItems = items;
        }
        else
        {
            filteredItems = items.Where(x => x.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private async Task SelectFile(BatchFileResponse file)
    {
        selectedFile = file;
        await LoadCsvContent(selectedFile);
        showPreview = true;

        model.BatchFileID = selectedFile.BatchFileID;
    }

    private async Task LoadCsvContent(BatchFileResponse csvFile)
    {
        try
        {
            if (selectedFile == null)
                return;

            var contentResponse = await apiClient.BatchFileDownloadAsync(csvFile.BatchFileID);

            if (contentResponse.StatusCode == 200)
            {
                using (var reader = new StreamReader(contentResponse.Stream))
                using (var csv = new CsvReader(reader, new CsvConfiguration(CultureInfo.InvariantCulture) { Delimiter = "," }))
                {
                    var records = csv.GetRecords<dynamic>();
                    csvContent = records.Select(record => (IDictionary<string, object>)record)
                                .Select(record => record.ToDictionary(kv => kv.Key, kv => kv.Value?.ToString() ?? ""))
                                .ToList();
                    csvHeaders = csvContent.First().Keys.Select((k, i) => new Column() { Name = k, Position = i }).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private void HidePreview()
    {
        selectedFile = new();
        showPreview = false;
    } 

    private async Task SubmitMessage()
    {
        try
        {
            if (sendOption == SendOption.SEND_NOW)
                model.DeliveryTime = null;


                var res = await apiClient.SmsBatchCsvCreateAsync(model);
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }




    private void ClearMessage()
    {
        model.MessageText = string.Empty;
        counterText = "Type your Message here";
    }

    private async Task OnTextChange(ChangeEventArgs e)
    {
        var strSmsText = e.Value?.ToString();

        if (string.IsNullOrWhiteSpace(strSmsText))
        {
            counterText = "Type your Message here";
            return;
        }

        int intSmsLength = strSmsText.GetValidGsmTextLength();
        int intSmsParts = GetMessageParts(intSmsLength);
        int intNextMax = intSmsParts == 1 ? 160 : intSmsParts * 153;

        if (intSmsParts > settings.SmsMaxParts)
        {
            await alert.Info("Maximum SMS characters reached!", "alert");
            return;
        }

        if (intSmsParts > 1)
        {
            if (intSmsLength == 161)
                await alert.Info($"You have just exceeded 160 characters. You will be charged {intSmsParts} pages for this message!", "alert");

            if (intSmsLength == intNextMax - 153 + 1)
                await alert.Info($"You have just exceeded {intNextMax - 153} characters. You will be charged {intSmsParts} pages for this message!", "alert");
        }
        counterText = $"{intSmsLength} / {intNextMax} . . . . . . {intSmsParts} page{(intSmsParts > 1 ? "s" : null)}";
    }

    private static int GetMessageParts(int length)
    {
        if (length <= 160) return 1;

        return (int)Math.Ceiling(length / 153.0);
    }

    private string ParseMessage(string template, IDictionary<string, object> values)
    {
        foreach (var key in values.Keys)
        {
            // Replace placeholders in the format {ColumnName} case-insensitively
            template = Regex.Replace(template, $@"\{{{Regex.Escape(key)}\}}", values[key].ToString(), RegexOptions.IgnoreCase);
        }
        return template;
    }

    private class WizardStep
    {
        public string Title { get; set; }
    }

    private class Column
    {
        public string Name { get; set; }
        public int Position { get; set; }
    }
}
