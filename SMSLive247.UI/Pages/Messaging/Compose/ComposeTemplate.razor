@using CsvHelper
@using CsvHelper.Configuration
@using SMSLive247.UI.Pages.Messaging.Contacts.Modals
@using SMSLive247.UI.Pages.Messaging.Compose.Modals
@using System.Text.RegularExpressions
@using System.Globalization
@using System.Data

@inject Settings settings;

<Loading NullCheckObject="model">
    <Card HeaderTitle="@GetStepTitle()">
        <Body>
        <!-- Step 1: Select CSV File and Preview Content -->
        @if (currentStepIndex == 0)
        {
            <SearchArea>
                <LeftRight>
                    <Left>
                        <input class="form-control" type="search" placeholder="Search..."
                                @oninput="e => OnSearch(e.Value?.ToString()!)" />
                    </Left>
                    <Right>
                        <Button Type="Button.Style.ADD" @onclick="e => csvFileModal.Show()">
                            Upload CSV File...
                        </Button>
                    </Right>
                </LeftRight>
            </SearchArea>
            <Table Items="visibleCsvFiles">
                <Columns>
                    <Column Width="15">
                        <input type="radio" name="file_radios" 
                            checked="@(model.Request.BatchFileID == context.BatchFileID)" 
                            @onchange="e => SelectFile(context)" />
                    </Column>
                    <Column Header="File Name" Width="45%">@context.Description</Column>
                    <Column Header="Total Numbers" Width="15%">
                        <FormatNumber Number="@context.TotalNumbers"></FormatNumber>
                    </Column>
                    <Column Header="Date Uploaded">
                        <FormatDate DateTime="@context.DateCreated"></FormatDate>
                    </Column>
                    <Column Header="File Type">
                        <span class="badge text-bg-info">.@context.FileType.ToUpper()</span>
                    </Column>
                </Columns>
            </Table>

            <h5 class="mt-4">File Content Preview</h5>

            @if (previewFileIndex == 0)
            {
                <p class="">Select a bulk file above, a preview of its contents will be displayed below.</p>
            }
            else if(previewFileIndex == 1 || previewFileIndex == 2)
            {
            <Loading BoolCheck="@(previewFileIndex == 2)">
                <Table Items="model.DataRows" TItem="DataRow" Context="row">
                    <Columns>
                        @foreach (var col in model.DataColumns)
                        {
                            <Column Header="@col.ColumnName">@row[col.Ordinal]</Column>
                        }
                    </Columns>
                </Table>
            </Loading>
            }
            else if(previewFileIndex == 3)
            {
                <p class="text-error">Error loading preview, please select another file</p>
            }
        }

        <!-- Step 2: Select Field For Recipient Numbers and Type Message -->
        @if (currentStepIndex == 1)
        {
            <MultiColumn>
                <Column1>
                    <EditForm Model="model" OnValidSubmit="SubmitMessage">
                        <ValidationSummary class="text-danger" />
                        <DataAnnotationsValidator />

                        <FormField Label="Sender ID">
                            <InputSelect @bind-Value="model.Request.SenderID" class="form-select" required>
                                <option value="">-- select sender id --</option>
                                @foreach (var senderId in model.SenderIds)
                                {
                                    <option value="@senderId">@senderId</option>
                                }
                            </InputSelect>
                        </FormField>
                        <FormField Label="Phone Number Column">
                            <InputSelect @bind-Value="model.Request.PhoneNumberColumn" class="form-select" required>
                                @foreach (var col in model.DataColumns)
                                {
                                    <option value="@col.Ordinal">@col.ColumnName</option>
                                }
                            </InputSelect>
                        </FormField>
                        <FormField Label="Message">
                            <div class="d-flex justify-content-between">
                                <label class="form-label" for="m2">@model.CounterText</label>
                                <button class="btn btn-close btn-sm" type="button" title="Clear Message" @onclick="e => model.ClearMessage()"></button>
                            </div>
                            <textarea class="form-control" id="m2" rows="5" maxlength="@settings.MaxCharacter" 
                                        @bind="model.Request.MessageText" @oninput="OnTextChange"
                                        placeholder="Enter message template with placeholders like [FirstName], [AccountNumber], etc." required></textarea>
                            <div class="form-text">
                                Messages longer than 160 characters are charged per each page
                            </div>
                        </FormField>
                        <FormInputText Label="Send Delivery Report To Email" @bind-Value="model.DeliveryEmail"></FormInputText>
                        <FormField Label="Send Options">
                            <InputRadioGroup @bind-Value="model.SendOption">
                                <div class="form-check-inline">
                                    <InputRadio id="sendNow" Value="@SendOption.SEND_NOW" />
                                    <label class="form-check-label" for="sendNow">Send Now</label>
                                </div>
                                <div class="form-check-inline">
                                    <InputRadio id="schedule" Value="@SendOption.SEND_LATER" />
                                    <label class="form-check-label" for="schedule">Schedule for Later</label>
                                </div>
                            </InputRadioGroup>
                        </FormField>
                        @if (model.SendOption == SendOption.SEND_LATER) 
                        {
                            <div class="mb-4">
                                <div class="input-group">
                                    <span class="input-group-text">Delivery Time</span>
                                    <InputDate class="form-control" id="s5"
                                                Type="InputDateType.DateTimeLocal"
                                                @bind-Value="model.Request.DeliveryTime" /> 
                                </div>
                                <div class="form-text">Your time zone is: West/Central Africa GMT +1</div>
                            </div>
                        }
                    </EditForm>
                </Column1>
                <Column2>
                    <h6>Message Preview</h6>
                    @if (model.DataRows.Count > 0)
                    {
                        if (model.IsValidPhoneColumn == false)
                        {
                            <div class="text-danger pt-3">
                                The selected phone number column contains invalid characters
                            </div>
                        }
                        else
                        {
                            <Table Items="model.DataRows" TItem="DataRow" Context="row">
                                <Columns>
                                    <Column Header="Recipient Number">
                                        @row[model.Request.PhoneNumberColumn]
                                    </Column>
                                    <Column Header="Message">
                                        @ParseMessage(row)
                                    </Column>
                                </Columns>
                            </Table>
                        }
                    }
                </Column2>
            </MultiColumn>
        }
        </Body>
        <Footer>
            <LeftRight>
                <Left>
                    <div class="btn-group">
                        <button class="btn btn-outline-primary" type="button" disabled="@(currentStepIndex == 0)"
                                @onclick="e => currentStepIndex--">
                            <i class="fa fa-arrow-left me-2"></i>Previous
                        </button>
                        <button class="btn btn-outline-primary" type="button" disabled="@(currentStepIndex > 0 || previewFileIndex != 2)"
                                @onclick="e => currentStepIndex++">
                            Next<i class="fa fa-arrow-right ms-2"></i>
                        </button>
                    </div>
                </Left>
                <Right>
                    <div hidden="@(currentStepIndex != 1)">
                        @if (model.SendOption == SendOption.SEND_NOW)
                        {
                            <button class="btn btn-primary" type="submit" form="TemplateMessageForm" @onclick="SubmitMessage">
                                <i class="fa fa-paper-plane me-2"></i>Send SMS Now!
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-primary" type="submit" form="TemplateMessageForm" @onclick="SubmitMessage">
                                <i class="fa fa-clock me-2"></i>Queue Message
                            </button>
                        }
                    </div>
                </Right>
            </LeftRight>
        </Footer>
    </Card>

    <BulkFileModal @ref="csvFileModal" ForCSV="true" OnCompleted="FetchData"></BulkFileModal>
</Loading>

<a href="https://new.smslive247.com/Support/Docs/Help/Html/Template%20SMS.htm"
   target="_blank" class="text-decoration-none">
    Click here for step-by-step instruction on how to setup a template SMS.
</a>

@code {
    private BulkFileModal csvFileModal = new();

    private ComposeTemplateModel? model;
    private int currentStepIndex; //0/1
    private int previewFileIndex; //0=no file selected 1=loading preview 2=preview success 3=preview failed

    private List<BatchFileResponse> visibleCsvFiles = [];

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        try
        {
            var t1 = apiClient.BatchFileListAsync();
            var t2 = apiClient.SenderIdListAsync(1, 500, null);

            await Task.WhenAll(t1, t2);
            model = new(t2.Result.Result, t1.Result.Result);
            visibleCsvFiles = model.BatchCsvFiles;
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private string GetStepTitle(int? index = null)
    {
        if (index == null)
            index = currentStepIndex;

        if (index == 0)
            return "Select & Preview File";

        return "Compose Message";
    }

    private string GetStepClass(int stepIndex)
    {
        if (stepIndex < currentStepIndex)
            return "complete";

        if (stepIndex == currentStepIndex)
            return "active";

        return string.Empty;
    }

    private void OnSearch(string searchText)
    {
        if (model == null) return;

        if (string.IsNullOrEmpty(searchText))
            visibleCsvFiles = model.BatchCsvFiles;
        else
            visibleCsvFiles = model.BatchCsvFiles.Where(x => x.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task SelectFile(BatchFileResponse file)
    {
        if (model == null) return;
        try
        {
            previewFileIndex = 1;
            model.ClearData();
            StateHasChanged();
            var contentResponse = await apiClient.BatchFileDownloadAsync(file.BatchFileID);

            model.LoadData(contentResponse.Stream, file.BatchFileID);
            previewFileIndex = 2;
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
            previewFileIndex = 3;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task SubmitMessage()
    {
        if (model == null) return;
        try
        {
            if (model.SendOption == SendOption.SEND_NOW)
                model.Request.DeliveryTime = null;

            model.Request.MessageText = strSmsText ?? "";
            var res = await apiClient.SmsBatchCsvCreateAsync(model.Request);
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private string? strSmsText;
    private async Task OnTextChange(ChangeEventArgs e)
    {
        if (model == null) return;
        strSmsText = e.Value?.ToString().RemoveSpacesBetweenBraces();
        model.CounterText = await ComposeExtensions.CountSmsMessages(alert, strSmsText, settings.SmsMaxParts);
    }

    private string ParseMessage(DataRow row)
    {
        if (model == null) 
            return string.Empty;
 
        if (string.IsNullOrWhiteSpace(strSmsText))
            return string.Empty;

        string template = strSmsText;

        foreach (var col in model.DataColumns)
        {
            // Trim the key to remove any leading or trailing spaces
            string columnName = col.ColumnName.Trim().Replace(" ", "").ToUpper();

            // Create the regex pattern to match the double placeholder with optional spaces inside the curly braces
            string pattern = $@"\{{\s*{Regex.Escape(columnName)}\s*\}}";

            // Replace the placeholders with the corresponding values, trimmed of any leading or trailing spaces
            template = Regex.Replace(template, pattern, row[col.ColumnName].ToString() ?? "", RegexOptions.IgnoreCase);
        }

        return template;
    }
}
