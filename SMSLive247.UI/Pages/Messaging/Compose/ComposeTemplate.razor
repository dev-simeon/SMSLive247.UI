@using CsvHelper
@using CsvHelper.Configuration
@using SMSLive247.UI.Pages.Messaging.Contacts.Modals
@using System.Globalization
@using System.Text.RegularExpressions
@using System.Data
@inject Settings settings;

<div class="container">
    <!-- Step Indicators -->
    <ol class="step-indicator">
        <li class="@GetStepClass(0)">
            <div class="step"><i class="fa fa-file"></i></div>
            <div class="caption hidden-xs hidden-sm py-2 px-3">Step 1: @GetStepTitle(0)</div>
        </li>
        <li class="@GetStepClass(1)">
            <div class="step"><i class="fa fa-comment"></i></div>
            <div class="caption hidden-xs hidden-sm py-2 px-3">Step 2: @GetStepTitle(1)</div>
        </li>
    </ol>

    <!-- Combined Step 1: Select CSV File and Preview Content -->
    @if (currentStepIndex == 0)
    {
        <div>
            <h3>@GetStepTitle()</h3>
            <a href="https://new.smslive247.com/Support/Docs/Help/Html/Template%20SMS.htm" target="_blank" class="text-decoration-none">
                Click here for step-by-step instruction on how to setup a template SMS.
            </a>
            <Card>
                <Body>
                    <SearchArea>
                        <LeftRight>
                            <Left>
                                <input type="search" class="form-control" placeholder="Search..." @bind="searchText" @oninput="e => OnSearch(e.Value?.ToString()!)" />
                            </Left>
                            <Right>
                                <Button Type="Button.Style.ADD" @onclick="e => csvFileModal.Show()">
                                    Upload CSV File...
                                </Button>
                            </Right>
                        </LeftRight>
                    </SearchArea>
                    <Table Items="visibleCsvFiles">
                        <Columns>
                            <Column Width="15">
                                <input type="radio" name="file" @onclick="e => SelectFile(context)">
                            </Column>
                            <Column Header="File Name" Width="45%">@context.Description</Column>
                            <Column Header="Total Numbers" Width="15%">
                                <FormatNumber Number="@context.TotalNumbers"></FormatNumber>
                            </Column>
                            <Column Header="Date Uploaded">
                                <FormatDate DateTime="@context.DateCreated"></FormatDate>
                            </Column>
                            <Column Header="File Type">
                                <span class="badge text-bg-info">.@context.FileType.ToUpper()</span>
                            </Column>
                        </Columns>
                    </Table>
                    @if (isFileSelected)
                    {
                        <div class="table-container">
                            <Table Items="dataTable.Rows.OfType<DataRow>().ToList()" TItem="DataRow" Context="row">
                                <Columns>
                                    @foreach (var col in columns)
                                    {
                                        <Column Header="@col.ColumnName">@row[col.Ordinal]</Column>
                                    }
                                </Columns>
                            </Table>
                        </div>
                    }
                </Body>
            </Card>
        </div>
    }

    <!-- Step 2: Select Field For Recipient Numbers and Type Message -->
    @if (currentStepIndex == 1)
        {
            <div>
            <h3>@GetStepTitle()</h3>
                <Card HeaderTitle="Compose Message">
                    <Body>
                        <MultiColumn>
                            <Column1>
                                <EditForm Model="model" OnValidSubmit="SubmitMessage">
                                    <ValidationSummary class="text-danger" />
                                    <DataAnnotationsValidator />

                                    <FormField Label="Sender ID">
                                        <InputSelect @bind-Value="model.SenderID" class="form-select" required>
                                            <option value="">-- select sender id --</option>
                                            @foreach (var senderId in senderIdList)
                                            {
                                                <option value="@senderId">@senderId</option>
                                            }
                                        </InputSelect>
                                    </FormField>
                                    <FormField Label="Phone Number Column">
                                        <InputSelect @bind-Value="model.PhoneNumberColumn" class="form-select" required>
                                            @foreach (var header in columns)
                                            {
                                                <option value="@header.Ordinal">@header.ColumnName</option>
                                            }
                                        </InputSelect>
                                    </FormField>
                                    <FormField Label="Message">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-label" for="m2">@counterText</label>
                                            <button type="button" class="btn btn-close btn-sm" title="Clear Message" @onclick="ClearMessage"></button>
                                        </div>
                                        <textarea class="form-control" id="m2" rows="5" maxlength="@settings.MaxCharacter" 
                                                    @bind="model.MessageText" @oninput="OnTextChange"
                                                    placeholder="Enter message template with placeholders like [FirstName], [AccountNumber], etc." required></textarea>
                                        <div class="form-text">
                                            Messages longer than 160 characters are charged per each page
                                        </div>
                                    </FormField>
                                    <FormInputText Label="Send Delivery Report To Email" @bind-Value="deliveryEmail"></FormInputText>
                                    <FormField Label="Send Options">
                                        <InputRadioGroup @bind-Value="sendOption">
                                            <div class="form-check-inline">
                                                <InputRadio id="sendNow" Value="@SendOption.SEND_NOW" />
                                                <label class="form-check-label" for="sendNow">Send Now</label>
                                            </div>
                                            <div class="form-check-inline">
                                                <InputRadio id="schedule" Value="@SendOption.SEND_LATER" />
                                                <label class="form-check-label" for="schedule">Schedule for Later</label>
                                            </div>
                                        </InputRadioGroup>
                                    </FormField>
                                    @if (sendOption == SendOption.SEND_LATER)
                                    {
                                        <div class="mb-4">
                                            <div class="input-group">
                                                <span class="input-group-text">Delivery Time</span>
                                                <InputDate class="form-control" id="s5" Type="InputDateType.DateTimeLocal" @bind-Value="model.DeliveryTime" />
                                            </div>
                                            <div class="form-text">Your time zone is: West/Central Africa GMT +1</div>
                                        </div>
                                    }
                                </EditForm>
                            </Column1>
                            <Column2>
                                <h6>Message Preview</h6>
                                @if (dataTable != null && dataTable.Rows.Count > 0)
                                {
                                    if (!dataTable.IsPhoneNumberColumn(model.PhoneNumberColumn))
                                    {
                                        <div class="text-danger pt-3">
                                            The selected phone number column contains invalid characters
                                        </div>
                                    }
                                    else
                                    {
                                        <Table Items="dataTable.Rows.OfType<DataRow>().ToList()" TItem="DataRow" Context="row">
                                            <Columns>
                                                <Column Header="Recipient Number">
                                                    @row[model.PhoneNumberColumn]
                                                </Column>
                                                <Column Header="Message">
                                                    @ParseMessage(row)
                                                </Column>
                                            </Columns>
                                        </Table>
                                    }
                                }
                            </Column2>
                        </MultiColumn>
                    </Body>
                    <Footer>
                        @if (sendOption == SendOption.SEND_NOW)
                        {
                            <button form="TemplateMessageForm" type="submit" class="btn btn-primary" @onclick="SubmitMessage">
                                <i class="fa fa-paper-plane me-2"></i>Send SMS Now!
                            </button>
                        }
                        else
                        {
                            <button form="TemplateMessageForm" type="submit" class="btn btn-primary" @onclick="SubmitMessage">
                                <i class="fa fa-clock me-2"></i>Queue Message
                            </button>
                        }
                    </Footer>
                </Card>
            </div>
        }

    <div>
        <button type="button" class="btn btn-primary" disabled="@(currentStepIndex == 0)" 
                @onclick="e => currentStepIndex--">
            Previous
        </button>
        <button type="button" class="btn btn-primary" disabled="@(currentStepIndex == 1 || !isFileSelected)"
                @onclick="e => currentStepIndex++">
            Next
        </button>
    </div>
</div>

<BulkFileModal @ref="csvFileModal" ForCSV="true" OnCompleted="FetchData"></BulkFileModal>

@code {
    private enum SendOption { SEND_NOW, SEND_LATER }

    private SmsBatchCsvRequest model = new();
    private string deliveryEmail = string.Empty; //TODO; add to API model

    private BulkFileModal csvFileModal = new();

    private int currentStepIndex; //0/1
    private string? searchText;
    private bool isFileSelected => !string.IsNullOrEmpty(model.BatchFileID);

    private List<BatchFileResponse> allCsvFiles = new();
    private List<BatchFileResponse> visibleCsvFiles = new();

    private List<string> senderIdList = [];
    private DataTable dataTable = new();
    private List<DataColumn> columns = [];

    private string counterText = "Type your Message here";
    private SendOption sendOption = SendOption.SEND_NOW;

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        try
        {
            var t1 = apiClient.BatchFileListAsync();
            var t2 = apiClient.SenderIdListAsync(1, 500, null);

            await Task.WhenAll(t1, t2);

            allCsvFiles = t1.Result.Result.Where(x => x.FileType == "csv").OrderByDescending(x => x.DateCreated).ToList();
            senderIdList = t2.Result.Result.Select(x => x.SenderID).ToList();
            visibleCsvFiles = allCsvFiles;
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private string GetStepTitle(int? index = null)
    {
        if (index == null)
            index = currentStepIndex;

        if (index == 0)
            return "Select & Preview CSV";
        return "Compose Message";
    }

    private string GetStepClass(int stepIndex)
    {
        if (stepIndex < currentStepIndex)
        {
            return "complete";
        }
        else if (stepIndex == currentStepIndex)
        {
            return "active";
        }
        else
        {
            return string.Empty;
        }
    }

    private void OnSearch(string input)
    {
        searchText = input;

        if (string.IsNullOrEmpty(searchText))
        {
            visibleCsvFiles = allCsvFiles;
        }
        else
        {
            visibleCsvFiles = allCsvFiles.Where(x => x.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private async Task SelectFile(BatchFileResponse file)
    {
        model.BatchFileID = file.BatchFileID;
        await LoadCsvContent(file.BatchFileID);
    }

    private async Task LoadCsvContent(string batchFileId)
    {
        try
        {
            dataTable.Clear();
            var contentResponse = await apiClient.BatchFileDownloadAsync(batchFileId);

            if (contentResponse.StatusCode == 200)
            {
                using var reader = new StreamReader(contentResponse.Stream);
                using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
                using var dr = new CsvDataReader(csv);

                dataTable.Load(dr);
                columns = dataTable.Columns.Cast<DataColumn>().ToList();

                // Detect the column index for phone numbers
                model.PhoneNumberColumn = dataTable.DetectPhoneNumberColumn();
            }
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private async Task SubmitMessage()
    {
        try
        {
            if (sendOption == SendOption.SEND_NOW)
                model.DeliveryTime = null;

            model.MessageText = strSmsText ?? "";
            var res = await apiClient.SmsBatchCsvCreateAsync(model);
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private void ClearMessage()
    {
        model.MessageText = string.Empty;
        counterText = "Type your Message here";
    }

    private string? strSmsText;
    private async Task OnTextChange(ChangeEventArgs e)
    {
        strSmsText = e.Value?.ToString().RemoveSpacesBetweenBraces();
        counterText = await Extensions.CountSmsMessages(alert, strSmsText, settings.SmsMaxParts);
    }

    private string ParseMessage(DataRow row)
    {
        if (string.IsNullOrWhiteSpace(strSmsText))
            return string.Empty;

        string template = strSmsText;

        foreach (var col in columns)
        {
            // Trim the key to remove any leading or trailing spaces
            string columnName = col.ColumnName.Trim().Replace(" ", "").ToUpper();

            // Create the regex pattern to match the double placeholder with optional spaces inside the curly braces
            string pattern = $@"\{{\s*{Regex.Escape(columnName)}\s*\}}";

            // Replace the placeholders with the corresponding values, trimmed of any leading or trailing spaces
            template = Regex.Replace(template, pattern, row[col.ColumnName].ToString() ?? "", RegexOptions.IgnoreCase);
        }

        return template;
    }
}
