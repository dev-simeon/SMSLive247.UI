<EditModal TItem="ContactResponse" Size="Modal.ModalSize.MEDIUM" @ref="editor" LabelText="Contact"
           OnCreate="OnCreate"
           OnUpdate="OnUpdate"
           OnDelete="OnDelete"
           OnCompleted="OnCompleted">
    @if(editor.EditMode == 0)
    {
        <div class="row row-gap-1">
            <div class="col-6">
                <label class="form-label">Name</label>
            </div>
            <div class="col-6">
                <label class="form-label">PhoneNumber</label>
            </div>
            @foreach (var field in contactFields)
            {
                <div class="col-6">
                    <InputText class="form-control" @bind-Value="field.ContactName"></InputText>
                </div>
                <div class="col-6">
                    <InputText class="form-control" @bind-Value="field.PhoneNumber"></InputText>
                </div>
            }
        </div>

        <div class="mt-2">
            <InputCheckbox class="form-check-input me-1" id="addToGroup" @bind-Value="addToGroup"></InputCheckbox>
            <label for="addToGroup" class="form-check-label">Add Contacts to Group</label>
        </div>

        @if (addToGroup)
        {
            <div class="mt-2">
                <label class="form-label mb-1">Select Group</label>
                <InputSelect class="form-select w-50" @bind-Value="selectedGroup">
                    @foreach (var group in AllGroups)
                    {
                        <option value="@group.Name">@group.Name</option>
                    }
                </InputSelect>
            </div>
        }

        <button type="button" class="btn btn-outline-secondary mt-3" @onclick="AddField">
            <i class="fa fa-plus-circle me-2"></i>
            Add More Contact
        </button>
    }
    else
    {
        <FormInputText Label="Name" @bind-Value="model.ContactName"></FormInputText>
        <FormInputText Label="Phone Number" @bind-Value="model.PhoneNumber"></FormInputText>
    }
</EditModal>

@code {
    [Parameter] public List<GroupModel> AllGroups { get; set; } = [];
    [Parameter] public EventCallback OnCompleted { get; set; }

    private EditModal<ContactResponse> editor = new();
    private ContactResponse model => editor.Model;
    private List<ContactResponse> contactFields = new() { new ContactResponse() };

    private bool addToGroup = false;
    private string selectedGroup = string.Empty;

    public void Show(ContactResponse? item = null) => editor.Show(item);
    public void Delete(ContactResponse item) => editor.Delete(item);

    private void AddField()
    {
        contactFields.Add(new ContactResponse());
    }

    public async Task OnCreate()
    {
        await Task.WhenAll(contactFields.Select(async contact =>
        {
            var request = new ContactCreateRequest
            {
                ContactName = contact.ContactName,
                PhoneNumber = contact.PhoneNumber,
                Groups = !string.IsNullOrEmpty(selectedGroup) ? new List<string> { selectedGroup } : new()
            };

            await apiClient.ContactCreateAsync(request);
        }));

        // Reset fields after creating contacts
        contactFields = new List<ContactResponse> { new ContactResponse() };
        addToGroup = false;
        selectedGroup = string.Empty;
    }

    private async Task OnUpdate()
    {
        var request = new ContactUpdateRequest
        {
            ContactName = model.ContactName,
            PhoneNumber = model.PhoneNumber,
            Groups = model.Groups
        };

        await apiClient.ContactUpdateAsync(model.PhoneNumber, request);
    }

    private async Task OnDelete()
    {
        var question = "Are you sure you want to delete this contact?";
        bool confirmed = await alert.Confirm(question, "Confirm Deletion");

        if (confirmed)
        {
            await apiClient.ContactDeleteAsync(editor.Model.PhoneNumber);
        }
    }
}
