<EditModal Size="Modal.ModalSize.LARGE" TItem="GroupResponse" @ref="editor" LabelText="Group"
           OnCreate="OnCreate"
           OnUpdate="OnUpdate"
           OnDelete="OnDelete"
           OnCompleted="OnCompleted">

    <div class="form-group">
        <label for="groupName" class="form-label">Group Name</label>
        <InputText id="groupName" class="form-control w-50" @bind-Value="model.GroupName"></InputText>
    </div>

    <div class="mt-3">
        <label class="form-label">Select Contacts</label>
        <ContactSelctor @ref="contactSelector" Contacts="AllContacts" OnSelected="UpdateSelectedContacts" />
    </div>
</EditModal>

@code {
    [Parameter] public List<ContactModel> AllContacts { get; set; } = [];
    [Parameter] public EventCallback OnCompleted { get; set; }

    private EditModal<GroupResponse> editor = new();
    private GroupResponse model => editor.Model;

    private List<string> selectedContacts = [];

    private ContactSelctor contactSelector = new();

    protected override void OnParametersSet()
    {
        if (AllContacts != null)
        {
            foreach (var contact in AllContacts)
            {
                contact.Selected = selectedContacts.Contains(contact.Key);
            }
        }
    }

    public void Show(GroupResponse? group = null)
    {
        editor.Show(group);
        selectedContacts = group?.Members?.Select(c => c.PhoneNumber).ToList() ?? new List<string>();

        if (AllContacts != null)
        {
            foreach (var contact in AllContacts)
            {
                contact.Selected = selectedContacts.Contains(contact.Key);
            }
        }
    }

    public void Delete(GroupResponse group) => editor.Delete(group);

    private async Task OnCreate()
    {
        selectedContacts = AllContacts.Where(c => c.Selected).Select(c => c.Key).ToList();
        await apiClient.GroupCreateAsync(model.GroupName, selectedContacts);
    }

    private async Task OnUpdate()
    {
        selectedContacts = AllContacts.Where(c => c.Selected).Select(c => c.Key).ToList();
        await apiClient.GroupUpdateAsync(model.GroupName, selectedContacts);
    }

    private async Task OnDelete()
    {
        var question = "Are you sure you want to delete this group?";
        bool confirmed = await alert.Confirm(question, "Confirm Deletion");

        if (confirmed)
        {
            await apiClient.GroupDeleteAsync(model.GroupName);
        }
    }

    private void UpdateSelectedContacts()
    {
        selectedContacts = AllContacts.Where(c => c.Selected).Select(c => c.Key).ToList();
    }
}
