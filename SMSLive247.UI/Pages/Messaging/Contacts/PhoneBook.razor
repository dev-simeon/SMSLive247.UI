@using SMSLive247.UI.Pages.Messaging.Contacts.Modals

<Card>
    <Body>
        <SearchArea>
            <LeftRight>
                <Left>
                    <input type="search" class="form-control" placeholder="Search..." 
                        @bind="searchText" @oninput="e => OnSearch(e.Value?.ToString())" />
                </Left>
                <Right>
                    <Button Type="Button.Style.ADD"
                            @onclick="e => contactModal.Show()">
                        Add Contacts...
                    </Button>
                    <Button Type="Button.Style.ADD"
                            @onclick="e => groupModal.Show()">
                        Create Group...
                    </Button>
                </Right>
            </LeftRight>
        </SearchArea>
        <div class="mb-3 p-3 bg-info-subtle">
            <LeftRight>
                <Left>
                    <span>Groups: </span>
                    @foreach (var group in groups)
                    {
                        <div>
                            <input class="btn-check" type="checkbox"
                                   value="@group.Name" checked="@group.Selected"
                                   id="g-@group.Key" @onchange="e => OnGroupSelect(e, group)">
                            <label class="btn btn-outline-info" for="g-@group.Key">
                                @group.Name<span class="badge ms-2 text-bg-warning">@group.Count.ToString("#,##0")</span>

                                @if (group.Selected)
                                {
                                    <span>
                                        <i class="fa fa-edit mx-2" @onclick="e => groupModal.Show(group.Response)"></i>
                                        <i class="fa fa-trash" @onclick="e => groupModal.Delete(group.Response)"></i>
                                    </span>
                                }
                            </label>
                        </div>
                    }
                </Left>
                <Right>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox"
                               title="Select single/multiple Groups"
                               @bind="@MultiSelectGroup" />
                    </div>
                </Right>
            </LeftRight>
        </div>
        <div class="d-flex flex-wrap">
            @foreach (var contact in contacts.Where(x => x.Visible))
            {
                var selectedCss = contact.Selected ? "fw-bold shadow bg-info-subtle" : null;

                <div class="p-2 border @selectedCss" style="width: 196px;"
                     @onclick="e => OnContactSelect(e, contact)">
                    <div class="h-100">
                        <span>@contact.Response.ContactName</span><br />
                        <small class="text-muted">@contact.Response.PhoneNumber</small>
                        @if (contact.Selected)
                        {
                            <span class="text-warning">
                                <i class="fa fa-edit mx-2" @onclick="e => contactModal.Show(contact.Response)"></i>
                                <i class="fa fa-trash" @onclick="e => contactModal.Delete(contact.Response)"></i>
                            </span>
                        }
                        <br />
                        @foreach (var group in (contact.Response.Groups ?? []))
                        {
                            <span class="badge bg-info me-1">@group</span>
                        }
                    </div>
                </div>
            }
        </div>
    </Body>
</Card>

<ContactModal @ref="contactModal" OnCompleted="FetchData" AllGroups="groups" />
<GroupModal @ref="groupModal" OnCompleted="FetchData" AllContacts="contacts" />

@code {
    private string searchText = string.Empty;
    private GroupModal groupModal = new();
    private ContactModal contactModal = new();

    private List<GroupModel> groups = [];
    private List<ContactModel> contacts = [];

    private bool MultiSelectGroup = false;

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        try
        {
            var t1 = apiClient.ContactListAsync();
            var t2 = apiClient.GroupListAsync();

            await Task.WhenAll(t1, t2);

            contacts = t1.Result.Result.Select(x => new ContactModel(x)).ToList();
            groups = t2.Result.Result.Select(x => new GroupModel(x)).ToList();
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private void OnSearch(string? input = null)
    {
        searchText = input ?? string.Empty;
        var selectedGroups = groups.Where(g => g.Selected).ToList();

        if (string.IsNullOrEmpty(searchText) && selectedGroups.Count == 0)
        {
            //no filter, show everything
            contacts.ForEach(x => x.Visible = true);
            return;
        }

        //otherwise, hide all before search
        contacts.ForEach(x => x.Visible = false);

        var temp = contacts.AsEnumerable();

        //filter by group
        foreach (var group in selectedGroups)
        {
            var members = group.Contacts.Select(c => c.Key).ToList();
            temp = temp.Where(c => members.Contains(c.Key));
        }

        // search by text
        if (!string.IsNullOrEmpty(searchText))
        {
            temp = temp.Where(c => c.Key.Contains(searchText, StringComparison.OrdinalIgnoreCase)
                                || c.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }

        temp.ToList().ForEach(x => x.Visible = true);
    }

    private void OnContactSelect(MouseEventArgs e, ContactModel contact)
    {
        var oldState = contact.Selected;
        contacts.ForEach(x => x.Selected = false);
        contact.Selected = !oldState;
    }

    private void OnGroupSelect(ChangeEventArgs e, GroupModel group)
    {
        if (MultiSelectGroup == false)
            groups.ForEach(x => x.Selected = false);

        group.Selected = (bool?)e.Value ?? false;
        OnSearch();
    }

}