@using SMSLive247.UI.Pages.Messaging.Contacts.Modals

<Card HeaderTitle="PhoneBook">
    <Header>
        <Button Type="Button.Style.ADD" 
                @onclick="e => contactModal.Show()">
                Add Contact
        </Button>
        <Button Type="Button.Style.ADD" 
                @onclick="e => groupModal.Show()">
                Add Group
        </Button>
    </Header>
    <Body>
        <SearchArea>
            <LeftRight>
                <Left>
                    <SearchBox @ref="searchBox" @onclick="OnSearch"></SearchBox>
                </Left>
            </LeftRight>
        </SearchArea>
        <div class="mb-3 p-3 bg-info-subtle">
            <span>Groups: </span>
            @foreach (var group in groups)
            {
                <div class="form-check-inline rounded border border-info bg-info-subtle py-1 px-2 ms-3">
                    <input class="form-check-input" type="checkbox"
                           value="@group.Name" checked="@group.Selected"
                           id="g-@group.Key" @onchange="e => OnGroupSelect(e, group)">
                    <label class="form-check-label" for="g-@group.Key">
                        <div class=" position-relative pe-2">
                            @group.Name
                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-info">
                                @group.Count.ToString("#,##0")
                            </span>
                        </div>
                    </label>
                </div>
            }
        </div>
        <div class="row">
            @foreach (var contact in contacts.Where(x => x.Visible))
            {
                <div class="col-md-2 p-2">
                    <span class="btn-group btn-group-sm" hidden="hidden">
                        <button class="btn btn-outline-primary" type="button"
                                @onclick="e => contactModal.Show(contact.Response)">
                            <i class="fa fa-copy"></i>
                        </button>
                        <button class="btn btn-outline-primary" type="button"
                                @onclick="e => contactModal.Delete(contact.Response)">
                            <i class="fa fa-paste"></i>
                        </button>
                    </span>

                    <span>@contact.Response.ContactName</span><br />
                    <small class="text-muted">@contact.Response.PhoneNumber</small>
                    <span class="text-warning text-opacity-75">
                        <i class="fa fa-edit mx-2" @onclick="e => contactModal.Show(contact.Response)"></i>
                        <i class="fa fa-trash" @onclick="e => contactModal.Delete(contact.Response)"></i>
                    </span><br />
                    @foreach (var group in (contact.Response.Groups ?? []))
                    {
                        <span class="badge bg-info me-1">@group</span>
                    }
                </div>
            }
        </div>
    </Body>
</Card>

<ContactModal @ref="contactModal" OnCompleted="FetchData" AllGroups="groups" />
<GroupModal @ref="groupModal" OnCompleted="FetchData" AllContacts="contacts" />

@code {
    private SearchBox searchBox = new();
    private GroupModal groupModal = new();
    private ContactModal contactModal = new();

    private List<GroupModel> groups = [];
    private List<ContactModel> contacts = [];

    // private List<ContactResponse> contacts = [];
    // private List<ContactResponse> filteredContacts = [];
    // private List<GroupResponse> groups = [];
    // private List<GroupResponse> filteredGroups = [];
    // private GroupResponse? selectedGroup;
    // private List<ContactResponse> selectedGroupContacts = [];

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        try
        {
            var t1 = apiClient.ContactListAsync();
            var t2 = apiClient.GroupListAsync();

            await Task.WhenAll(t1, t2);

            contacts = t1.Result.Result.Select(x => new ContactModel(x)).ToList();
            groups = t2.Result.Result.Select(x => new GroupModel(x)).ToList();
            // filteredContacts = contacts;
            // filteredGroups = groups;
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private void OnSearch()
    {
        contacts.ForEach(x => x.Visible = true);

        var selectedGroups = groups.Where(g => g.Selected).ToList();

        if (selectedGroups.Count > 0)
        {
            contacts.ForEach(x => x.Visible = false);

            foreach (var g in selectedGroups)
            {
                contacts.Where(x => g.Contacts.Select(x => x.Key).ToList().Contains(x.Key)).ToList().ForEach(x => x.Visible = true);
            }
        }

        // // Filter by search term
        // if (!string.IsNullOrEmpty(searchBox.Text))
        // {
        //     contacts.Where(c =>
        //         c.Key.Contains(searchBox.Text, StringComparison.OrdinalIgnoreCase) ||
        //         c.Name.Contains(searchBox.Text, StringComparison.OrdinalIgnoreCase)
        //     ).ToList().ForEach(x => x.Visible = true);
        // }

        // // Filter by group
        // if (selectedGroup != null)
        // {
        //     filteredContacts = filteredContacts.Where(c => c.Groups.Contains(selectedGroup.GroupName)).ToList();
        // }


    }

    private void OnGroupSelect(ChangeEventArgs e, GroupModel group)
    {
        group.Selected = (bool?)e.Value ?? false;
        OnSearch();
        //return OnSelected.InvokeAsync();

        // selectedGroup = groups.FirstOrDefault(g => g.GroupName == groupName);
        // if (selectedGroup != null)
        // {
        //     selectedGroupContacts = contacts.Where(c => c.Groups.Contains(groupName)).ToList();
        // }
    }

    private void RemoveContactFromGroup(ContactResponse contact, GroupResponse group)
    {
        // Logic to remove contact from group
    }
}
