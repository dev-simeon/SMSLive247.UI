<EditModal TItem="ContactResponse" Size="Modal.ModalSize.MEDIUM" @ref="editor" LabelText="Contact"
           OnCreate="OnCreate"
           OnUpdate="OnUpdate"
           OnDelete="OnDelete"
           OnCompleted="OnCompleted">
    @if(editor.EditMode == 0)
    {
        @foreach (var field in contactFields)
        {
            <FormInputText Label="Name" @bind-Value="field.ContactName"></FormInputText>
            <FormInputText Label="Phone Number" @bind-Value="field.PhoneNumber"></FormInputText>
           @if (!IsLastField(field))
            {
                <hr />
            }
        }

        <button type="button" class="btn btn-primary" @onclick="AddField">
            <i class="fa fa-plus-circle me-2"></i>
            Add Fields
        </button>
    }
    else
    {
        <FormInputText Label="Name" @bind-Value="model.ContactName"></FormInputText>
        <FormInputText Label="Phone Number" @bind-Value="model.PhoneNumber"></FormInputText>
    }
</EditModal>

@code {
    [Parameter] public EventCallback OnCompleted { get; set; }

    private EditModal<ContactResponse> editor = new();
    private ContactResponse model => editor.Model;
    private List<ContactResponse> contactFields = [ new ContactResponse() ];

    public void Show(ContactResponse? item = null) => editor.Show(item);
    public void Delete(ContactResponse item) => editor.Delete(item);

    private void AddField()
    {
        contactFields.Add(new ContactResponse());
    }

    private bool IsLastField(ContactResponse field) => contactFields.LastOrDefault() == field;

    public async Task OnCreate()
    {
        foreach (var contact in contactFields)
        {
            var request = new ContactCreateRequest
            {
                ContactName = contact.ContactName,
                PhoneNumber = contact.PhoneNumber,
                Groups = new List<string>()
            };

            await apiClient.ContactCreateAsync(request);
        }
    }

    private async Task OnUpdate()
    {
        var request = new ContactUpdateRequest
        {
            ContactName = model.ContactName,
            PhoneNumber = model.PhoneNumber,
            Groups = model.Groups
        };

        await apiClient.ContactUpdateAsync(model.PhoneNumber, request);
    }

    private async Task OnDelete()
    {
        var question = "Are you sure you want to delete this contact?";
        bool confirmed = await alert.Confirm(question, "Confirm Deletion");

        if (confirmed)
            await apiClient.ContactDeleteAsync(editor.Model.PhoneNumber);
    }
}
