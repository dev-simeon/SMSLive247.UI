@page "/Messaging/SenderIds"
@attribute [Authorize]

<PageTitle>Sender Ids</PageTitle>

<h3 class="mb-4">Sender IDs</h3>

<Card HeaderTitle="Sender IDs">
    <Body>
        <SearchArea>
            <LeftRight>
                <Left>
                    <SearchBox @ref="searchBox" @onclick="SearchSenderId">
                        <InputSelect class="form-select" @bind-Value="selectedStatus">
                            <option value="" selected>All</option>
                            <option value="APPROVED">Approved</option>
                            <option value="PENDING">Pending Approval</option>
                        </InputSelect>
                    </SearchBox>
                </Left>
                <Right>
                    <Button Type="Button.Style.DEFAULT" @onclick="() => senderIdModal.Show()">
                        New Sender ID Registration
                    </Button>
                </Right>
            </LeftRight>
        </SearchArea>
        <Table Items="filteredItems">
            <Columns>
                <Column Header="#"><input class="form-check-input" type="checkbox" /></Column>
                <Column Header="SenderID">@context.SenderID</Column>
                <Column Header="Status">
                    @if (context.Approved)
                    {
                        <span class="badge text-bg-success">APPROVED</span>
                    }
                    else
                    {
                        <span class="badge text-bg-warning">PENDING</span>
                    }
                </Column>
                <Column>
                    <Actions OnDelete="() => senderIdModal.Delete(context)">
                    </Actions>
                </Column>
            </Columns>
        </Table>
    </Body>
</Card>

<SenderIdModal @ref="senderIdModal"></SenderIdModal>

@code {
    private SearchBox searchBox = new();
    private string selectedStatus = "";
    private List<SenderIdResponse> items = new();
    private List<SenderIdResponse> filteredItems = new();
    private SenderIdModal senderIdModal = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await apiClient.SenderIdListAsync(1, 500);

        if (response.StatusCode == 200)
        {
            items = response.Result.ToList();
            filteredItems = items;
        }
    }

    private void SearchSenderId()
    {
        filteredItems = items
            .Where(i => (string.IsNullOrWhiteSpace(selectedStatus) ||
                        (selectedStatus == "APPROVED" && i.Approved) ||
                        (selectedStatus == "PENDING" && !i.Approved)) &&
                        (string.IsNullOrWhiteSpace(searchBox.Text) || i.SenderID.Contains(searchBox.Text, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }
}
