@page "/Messaging/SenderIds"
@attribute [Authorize]

<PageTitle>Sender Ids</PageTitle>

<h3 class="mb-4">Sender IDs</h3>

<Card HeaderTitle="Sender IDs">
    <Body>
        <SearchArea>
            <LeftRight>
                <Left>
                    <SearchBox @ref="searchBox" @onclick="e => ds.LoadData(alert)">
                        <select class="form-select" @onchange="FilterStatusChanged">
                            <option value="All" selected>All</option>
                            <option value="Approved">Approved</option>
                            <option value="Pending Approval">Pending Approval</option>
                        </select>
                    </SearchBox>
                </Left>
                <Right>
                    <Button Type="Button.Style.DEFAULT" @onclick="ToggleModalVisibility">
                        New Sender ID Registration
                    </Button>
                </Right>
            </LeftRight>
        </SearchArea>
        <Table DataSource="ds">
            <Columns>
                <Column Header="#"><input class="form-check-input" type="checkbox" /></Column>
                <Column Header="SenderID">@context.SenderID</Column>
                <Column Header="Status">
                    @if (context.Status == "APPROVED")
                    {
                        <span class="badge text-bg-success">@context.Status</span>
                    }
                    else
                    {
                        <span class="badge text-bg-warning">@context.Status</span>
                    }
                </Column>
                <Column>
                    <Actions OnDelete="() => ConfirmDeleteSenderId(context.SenderID)">
                    </Actions>
                </Column>
            </Columns>
        </Table>
    </Body>
    <Footer>
        <Pager PageState="ds.PageState" OnPageChange="e => ds.SetPage(e).LoadData(alert)" />
    </Footer>
</Card>

<Modal Title="Register Sender ID" Hidden="@(!isModalVisible)">
    <Body>
        <FormInputText Label="Sender ID" @bind-Value="senderId"></FormInputText>
        <FormInputText Label="Message Purpose" @bind-Value="messagePurpose"></FormInputText>
        <div class="row my-3">
            <label class="form-label col-4">Sample Message</label>
            <div class="col-8">
                <InputTextArea class="form-control" @bind-Value="sampleMessage" rows="5"></InputTextArea>
            </div>
        </div>
    </Body>
    <Footer>
        <Button Type="Button.Style.CUSTOM" @onclick="SubmitSenderIdForRegistration">
            Submit
        </Button>
    </Footer>
</Modal>

@code {
    private SearchBox searchBox = new();
    private bool isModalVisible = false;
    private string senderId = string.Empty;
    private string messagePurpose = string.Empty;
    private string sampleMessage = string.Empty;
    private string selectedStatus = "All";
    private ApiDataSource<SenderIdResponse> ds = new();

    protected override async Task OnInitializedAsync()
    {
        ds.Callback = new((PageState p, FilterState? f) =>
        {
            return apiClient.SenderIdListAsync(p.PageNumber, p.PageSize);
        });

        await ds.LoadData(alert);
    }

    private void ToggleModalVisibility()
    {
        isModalVisible = true;
        StateHasChanged();
    }

    private async Task FilterStatusChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value.ToString();
        await ds.LoadData(alert);
    }

    private async Task ConfirmDeleteSenderId(string senderId)
    {
        bool confirmed = await alert.Confirm("Are you sure you want to delete this Sender ID?", "Confirm Deletion");
        if (confirmed)
        {
            await DeleteSenderId(senderId);
        }
    }

    private async Task DeleteSenderId(string senderId)
    {
        //Todo
        // await apiClient.SenderIdDeleteAsync(senderId);
        await ds.LoadData(alert);
    }

    private async Task SubmitSenderIdForRegistration()
    {
        var request = new SenderIdRequest()
            {
                SenderID = senderId,
                Purpose = messagePurpose,
                SampleText = sampleMessage
            };

        await apiClient.SenderIdCreateAsync(request);
        isModalVisible = false;
        await ds.LoadData(alert);
    }
}
