@page "/Messaging/Messages"
@attribute [Authorize]

<PageTitle>Messages</PageTitle>

<h3>Messages</h3>
@* 
<section class="d-flex flex-column gap-3 px-4 py-4">
    @if (!string.IsNullOrWhiteSpace(PageAlertMessage))
    {
        <SmsLive247Alert Message="@PageAlertMessage" />
    }

    <div class="d-flex flex-column gap-2">
        <div class="d-flex justify-content-end">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#composeSmsModal">New SMS</button>
        </div>
        <div class="table-responsive bg-white rounded-3 px-4 py-3">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>
                            <input type="checkbox" class="form-check-input" />
                        </th>
                        <th>Sender</th>
                        <th style="min-width: 350px">Message</th>
                        <th>Delivery Report</th>
                        <th style="min-width: 125px">Time</th>
                    </tr>
                </thead>
                <tbody class="table-group-divider">
                    @if (SentMessages == null)
                    {
                        <tr class="text-center text-secondary">
                            <td colspan="5" class="text-center text-secondary border-0">
                                <span class="spinner-border spinner-border-sm text-secondary"></span>
                                Loading...
                            </td>
                        </tr>
                    }
                    else
                    {
                        @if (SentMessages.Any())
                        {
                            foreach (var message in SentMessages)
                            {
                                <tr>
                                    <td><input type="checkbox" class="form-check-input" /></td>
                                    <td>@message.SenderID</td>
                                    <td>@message.MessageText</td>
                                    <td>
                                        <div class="d-flex flex-column gap-1">
                                            <a class="nav-link text-primary" href="#" 
                                              title="Total number processed by the system vs total no of numbers submitted"
                                            >
                                                @(message.TotalProcessed)/@(message.TotalProcessed + message.TotalFailed) 
                                            </a>
                                            <p class="fw-semibold fs-6 mb-0" title="sms credits used">@(message.Charged)ç</p>
                                            <p class="text-secondary text-small mb-0" title="message length in pages and characters">
                                                @message.MessageParts page(@message.MessageText.Length)
                                            </p>
                                        </div>
                                    </td>
                                    <td class="text-small text-secondary ">
                                        <div class="d-flex flex-wrap gap-1">
                                            <span>
                                                @message.SubmitDate.ToString("yyyy-MM-dd")
                                            </span>
                                            <span>
                                                @message.SubmitDate.ToString("hh:ss tt")
                                            </span>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr class="text-center text-secondary">
                                <td colspan="5" class="text-center text-secondary border-0">
                                    No messages found.
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</section>

<!-- New Message Modal -->
<div class="modal fade" id="composeSmsModal" data-bs-backdrop="static">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h5 class="modal-title">New Message</h5>
                @*<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <!-- Modal body -->
           <div class="modal-body">
                <form method="post" class="d-flex flex-column gap-2">
                    <div class="text-center @(FormValidationSuccess ? "text-success": "text-danger")">@FormMessage</div>
                    <div>
                        <label class="form-label mb-1" for="SenderId">Sender Id</label>
                        <input id="SenderId" class="form-control" @bind="SenderId" maxlength="11" required />
                    </div>

                    <div>
                        <label class="form-label mb-1 d-flex justify-content-between align-content-center" for="phoneNumbers">
                            <span>Recipient Phone Numbers</span>
                            <button type="button" class="btn btn-sm btn-outline-secondary"
                            @onclick="(Task (x) => {_showPhoneBook = true; return HandlePhoneBookTabChangeAsync(PhoneBookTabs.CONTACTS);})">
                                Add from PhoneBook
                            </button>
                        </label>
                        <textarea id="phoneNumbers" class="form-control"
                                  @bind="RecipientsNumbers"
                                  rows="5"></textarea>
                    </div>

                    <section class="selected-contacts">
                        @foreach (var kv in _selectedContacts)
                        {
                            <div class="contact" @key="kv.Key">
                                <span class="contact_title">@kv.Key</span>
                                <span class="contact_description">
                                    @kv.Value.Description
                                </span>
                                <i class='selected-contact-close-icon far fa-times-circle'></i>
                            </div>
                        }
                    </section>

                    <div>
                        <label class="form-label mb-1 d-flex justify-content-between" for="MessageText">
                            <span>Your Message</span>
                            <span>@_messageCounter</span>
                        </label>
                        <textarea id="MessageText" class="form-control" 
                           @bind="MessageText"
                           @oninput="HandleMessageInput"
                           rows="7"></textarea>
                        <button type="button" @onclick="ClearMessage" class="btn btn-sm btn-secondary clear my-2">Clear Msg</button>
                    </div>

                    <div class="mt-1 d-flex align-items-center gap-1">
                        <button type="button" class="btn btn-primary" @onclick="HandleSendNow">Send</button>
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>

            @*Contacts Pop-up (Bulfiles, Phonebook and groups)

            <section class="phone-book @(_showPhoneBook ? "phone-book__visible" : "")">
                <div class="d-flex justify-content-between align-content-center">
                    <h5 class="mb-0">Phone Book</h5>
                    <span aria-role="button" 
                        class="text-primary"
                        style="cursor: pointer;"
                        @onclick="(e => _showPhoneBook = false)"
                    >
                        Done
                    </span>
                </div>
                
                <ul class="nav nav-tabs pt-3 gap-3">
                    <li class="nav-item  @(_activePhoneBookTab == PhoneBookTabs.CONTACTS ? "active": "")"
                    @onclick="(e) => HandlePhoneBookTabChangeAsync(PhoneBookTabs.CONTACTS)">
                       All Contacts
                    </li>
                    <li class="nav-item @(_activePhoneBookTab == PhoneBookTabs.GROUPS ? "active": "")"
                    @onclick="(e) => HandlePhoneBookTabChangeAsync(PhoneBookTabs.GROUPS)">
                        Groups
                    </li>
                    <li class="nav-item @(_activePhoneBookTab == PhoneBookTabs.BULK_FILES ? "active": "")"
                    @onclick="(e) => HandlePhoneBookTabChangeAsync(PhoneBookTabs.BULK_FILES)">
                        Bulk Files
                    </li>
                </ul>
                <div class="px-3 pt-3" style="height: calc(100% - 78px)">
                    <section id="contacts" class="h-100" hidden="@(_activePhoneBookTab != PhoneBookTabs.CONTACTS)">
                        <div class="position-relative">
                            <input type="text" class="form-control" />
                            <i class='fas fa-search search--icon'></i>
                        </div>
                        

                        <section class="mt-3 pb-3" style="height: calc(100% - 37px); overflow-y:auto">
                            @if (PhoneBookContact == null)
                            {
                                <div colspan="5" class="h-100 d-flex justify-content-center align-items-center">
                                    <span class="spinner-border spinner-border-sm text-secondary"></span>
                                    Loading...
                                </div>
                            }else{
                                if (PhoneBookContact.Items.Any())
                                {
                                    var i = 1;
                                    foreach (var phoneBookContact in PhoneBookContact.Items)
                                    {
                                        <div class="form-check" @key="phoneBookContact">
                                            <input type="checkbox" class="form-check-input" id="contact@(i)"
                                                   checked="@phoneBookContact.Checked"
                                                @onchange="(e) => AddToSelectedContacts(phoneBookContact.ContactName, phoneBookContact.PhoneNumber, PhoneBookTabs.CONTACTS)"
                                            />
                                            <label class="form-check-label" for="contact@(i)">
                                                <div class="contact-info d-flex flex-column">
                                                    <span class="fw-semibold name">@phoneBookContact.ContactName</span>
                                                    <span>@phoneBookContact.PhoneNumber</span>
                                                </div>
                                                <span class="buttons d-none">
                                                    <a href="#addContactModal" data-toggle="modal" class="p-1 editContact">
                                                        <img src="../Content/Images/edit-button-black.svg" width="15" title="edit">
                                                    </a>
                                                    <a href="#addContactModal" data-toggle="modal" class="p-1 deleteContact">
                                                        <img src="../Content/Images/delete-photo-black.svg" width="15" title="delete">
                                                    </a>
                                                </span>
                                            </label>
                                        </div>

                                        i++;
                                    }

                                    if (PhoneBookContact.Items.Count < PhoneBookContact.TotalNoItemInDB)
                                    {
                                        <div class="text-center">
                                            <button class="btn fw-semibold"
                                            @onclick="(e) => LoadPhoneBookContactsFromDbAsync(PhoneBookContact.PageNo + 1)">Load More</button>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="mb-0 h-100 d-flex flex-column justify-content-center align-items-center">
                                        @if (!string.IsNullOrWhiteSpace(_errorMsgWhileFetchingContacts))
                                        {
                                            <p class="mb-0 fw-bold">@_errorMsgWhileFetchingContacts</p>
                                        }
                                        <p class="mb-0">There was no phone-book contact found.</p>
                                    </div>
                                }
                            }
                        </section>
                    </section>
                    
                    <section id="groups" class="h-100" hidden="@(_activePhoneBookTab != PhoneBookTabs.GROUPS)">
                        <input type="text" class="form-control" />
                        <section class="mt-3" style="height: calc(100% - 37px); overflow-y:auto">
                            <div class="mb-0 h-100 d-flex justify-content-center align-items-center">
                                No Group Found.
                            </div>
                        </section>
                    </section>
                    
                    <section id="bulkFiles" class="h-100" hidden="@(_activePhoneBookTab != PhoneBookTabs.BULK_FILES)">
                        <input type="text" class="form-control" />
                        <section class="mt-3" style="height: calc(100% - 37px); overflow-y:auto">
                            @if (BulkFileContact == null)
                            {
                                <div colspan="5" class="h-100 d-flex justify-content-center align-items-center">
                                    <span class="spinner-border spinner-border-sm text-secondary"></span>
                                    Loading...
                                </div>
                            }
                            else
                            {
                                if (BulkFileContact.Items.Any())
                                {
                                    var i = 1;
                                    foreach (var bulkfile in BulkFileContact.Items)
                                    {
                                        var bulkFileTotalItems = @bulkfile.TotalItems.ToString("N0");
                                        var description = $"{bulkfile.Description} {bulkfile.BatchFileID}";

                                        <div class="form-check" @key="bulkfile">
                                            <input type="checkbox" class="form-check-input" id="bulkfile@(i)"
                                            @onchange="(e) => AddToSelectedContacts(description, bulkFileTotalItems, PhoneBookTabs.BULK_FILES)">
                                            <label class="form-check-label" for="bulkfile@(i)">
                                                <div class="contact-info d-flex flex-column">
                                                    <span class="fw-semibold name">@bulkfile.Description</span>
                                                    <span>@bulkFileTotalItems Entries</span>
                                                </div>
                                            </label>
                                        </div>

                                        i++;
                                    }

                                    if (BulkFileContact.Items.Count < BulkFileContact.TotalNoItemInDB)
                                    {
                                        <div class="text-center">
                                            <button class="btn fw-semibold"
                                            @onclick="(e) => LoadBulkFilesFromDbAsync(BulkFileContact.PageNo + 1)">
                                                Load More
                                            </button>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="mb-0 h-100 d-flex flex-column justify-content-center align-items-center">
                                        @if(!string.IsNullOrWhiteSpace(__errorMsgWhileFetchingBulkFiles)){
                                            <p class="mb-0 fw-bold">@__errorMsgWhileFetchingBulkFiles</p>
                                        }
                                        <p class="mb-0">There was no bulk file found.</p>.
                                    </div>
                                }
                            }
                        </section>
                    </section>
                </div>
            </section>
        </div>
    </div>
</div>


@code {
    private const int _smsMaxLength = 960;
    private const int _smsAdLength = 0;
    private string _messageCounter = "";
    private string __errorMsgWhileFetchingBulkFiles = "";
    private string _errorMsgWhileFetchingContacts = "";
    private bool _showPhoneBook = false;
    private int _phoneBookPageSize = 300;
    private PhoneBookTabs _activePhoneBookTab = PhoneBookTabs.CONTACTS;

    public string SenderId { get; set; }
    public string RecipientsNumbers { get; set; }
    public string BulkFileNames { get; set; }
    public string MessageText { get; set; }
    private Dictionary<string, SelectedContact> _selectedContacts = new();

    private PhoneBook<ContactResponse> PhoneBookContact { get; set; }
    private ICollection<SmsBatchResponse> SentMessages { get; set; }
    private PhoneBook<BatchFileResponse> BulkFileContact { get; set; }




    protected override async Task OnInitializedAsync()
    {
        //LayoutPage.PageNavTitle = "Messages";
        try
        {
            var res = await apiClient.SmsBatchListAsync(PageNo, PageSize, null, null);
            SentMessages = res.Data;

        }
        catch (Exception ex)
        {
            PageAlertMessage = ex.Message;
            SentMessages = new List<SmsBatchResponse>();
        }
    }

    private async Task HandleMessageInput(ChangeEventArgs e)
    {
        var strSmsText = e.Value.ToString();
        int intSMSLen = strSmsText.GetValidGsmTextLength() + _smsAdLength;

        if (strSmsText.Length < 1)
        {
            //message textbox is empty.
            _messageCounter = "";
            return;
        }

        if (intSMSLen > _smsMaxLength)
        {
            MessageText = strSmsText.Substring(0, _smsMaxLength - _smsAdLength);
            await Js.InvokeVoidAsync("alert", "Maximum SMS characters reached!");
            return;
        }

        int intNextMax, intSmsParts, intPrevMax;
        if (intSMSLen <= 160)
        {
            intSmsParts = 1; intNextMax = 160; intPrevMax = 0;
        }
        else
        { //greater than 160
            intSmsParts = (int)Math.Ceiling(intSMSLen / 153m);
            intNextMax = intSmsParts * 153;
            intPrevMax = intNextMax - 153;
            if (intPrevMax < 160)
            {
                intPrevMax = 160;
            }
        }

        if (intSMSLen > 0)
        {
            _messageCounter = intSMSLen + "/" + intNextMax + " . . . Cost: " + intSmsParts + " SMS";
            if ((intPrevMax > 0) && (intSMSLen == (intPrevMax + 1))) 
            {
                await Js.InvokeVoidAsync("alert", $"You have just exceeded {intPrevMax}. You will be charged {intSmsParts} credits for this message!");
            }
        }
    }

    private void ClearMessage(){
        _messageCounter = "";
        MessageText = "";
    }

    private async Task HandlePhoneBookTabChangeAsync(PhoneBookTabs activeTab)
    {
        _activePhoneBookTab = activeTab;
        try
        {
            if (activeTab == PhoneBookTabs.CONTACTS)
            {
                if (PhoneBookContact == null)
                {
                    //fetch contacts
                    await LoadPhoneBookContactsFromDbAsync(1);

                    //save information to storage.
                    // var totalNoOfContactsInDB = GetItemTotalCountFromResponseHeader(res.Headers);
                    // await localStorage.SetItemAsync("totalNoContactsInDB", totalNoOfContactsInDB);
                }
            }

            if (activeTab == PhoneBookTabs.BULK_FILES)
            {
                if (BulkFileContact == null)
                {
                    //fetch bulkfiles
                    await LoadBulkFilesFromDbAsync(1);
                }
            }
        }
        catch (Exception ex) when (activeTab == PhoneBookTabs.CONTACTS)
        {
            _errorMsgWhileFetchingContacts = ex.Message;
            PhoneBookContact = new(Array.Empty<ContactResponse>(), 0);
        }
        catch (Exception ex) when (activeTab == PhoneBookTabs.BULK_FILES)
        {
            __errorMsgWhileFetchingBulkFiles = ex.Message;
            BulkFileContact = new(Array.Empty<BatchFileResponse>(), 0);
        }
    }

    private async Task LoadPhoneBookContactsFromDbAsync(int pageNo)
    {
        if (pageNo < 1)
            pageNo = 1;

        var res = await apiClient.ContactListAsync(pageNo, _phoneBookPageSize);
        if (pageNo > 1)
        {
            //not the first time we're loading data from the DB.
            //Append the data instead of assigning it.
            PhoneBookContact.Items.AddRange(res.Data);
            PhoneBookContact.PageNo += 1;
            return;
        }

        PhoneBookContact = new(res.Data, GetItemTotalCountFromResponseHeader(res.Headers));
    }

    private async Task LoadBulkFilesFromDbAsync(int pageNo, string? searchText = null)
    {
        searchText = string.IsNullOrWhiteSpace(searchText) ? searchText : "txt";
        if (pageNo < 1)
            pageNo = 1;

        var res = await apiClient.BatchFileListAsync(pageNo, _phoneBookPageSize, searchText);
        if (pageNo > 1)
        {
            //not the first time we're loading data from the DB.
            //Append the data instead of assigning it.
            BulkFileContact.Items.AddRange(res.Data);
            BulkFileContact.PageNo += 1;
            return;
        }

        BulkFileContact = new(res.Data, GetItemTotalCountFromResponseHeader(res.Headers));
    }

    private async Task SearchPhoneBook()
    {
        if(_activePhoneBookTab == PhoneBookTabs.CONTACTS)
        {
            if (PhoneBookContact.TotalNoItemInDB > _phoneBookPageSize)
            {
                //go load contacts from DB
                await LoadPhoneBookContactsFromDbAsync(1);
            }
        }

        if (_activePhoneBookTab == PhoneBookTabs.BULK_FILES)
        {
            if (BulkFileContact.TotalNoItemInDB > _phoneBookPageSize)
            {
                //go fetch from database
                //fetch bulkfiles
                await LoadBulkFilesFromDbAsync(1);
            }

        }
    }

    private void AddToSelectedContacts(string contactName, string description, PhoneBookTabs phoneBookType)
    {
        var bulkfileId = string.Empty;
        SelectedContact phoneBookContact;

        if (phoneBookType == PhoneBookTabs.BULK_FILES)
        {
            var splittedStr = contactName.Split(' ');
            contactName = splittedStr[0];
            bulkfileId = splittedStr[1];
            phoneBookContact = new SelectedContact(bulkfileId, $"{description} Entries", phoneBookType);
        }
        else
        {
            phoneBookContact = new SelectedContact(contactName, description, phoneBookType);
        }


        if (_selectedContacts.ContainsKey(contactName))
        {
            _selectedContacts.Remove(contactName);
            return;
        }
        _selectedContacts.Add(contactName, phoneBookContact);
    }

    private void RemoveFromSelectedContacts(string contactName)
    {
        if (string.IsNullOrWhiteSpace(contactName))
            throw new ArgumentNullException(nameof(contactName));

        SelectedContact phoneBookContact = _selectedContacts.First(k => k.Key == contactName).Value;

        if (phoneBookContact.Type == PhoneBookTabs.CONTACTS)
        {
            PhoneBookContact.Items.First(c => c.ContactName == contactName).Checked = false;
        }

        if (phoneBookContact.Type == PhoneBookTabs.CONTACTS)
        {
            PhoneBookContact.Items.First(c => c.ContactName == contactName).Checked = false;
        }
        _selectedContacts.Remove(contactName);
    }

    private int GetItemTotalCountFromResponseHeader(IReadOnlyDictionary<string, IEnumerable<string>> resHeaders)
    {
        var totalPageCount = resHeaders.FirstOrDefault(k => k.Key == "x-total-count").Value.First();
        return Convert.ToInt32(totalPageCount);
    }

    // private async Task HandleSeeMore(MouseEventArgs e)
    // {
    //     if (_activePhoneBookTab == PhoneBookTabs.CONTACTS)
    //     {
    //         //fetch contacts
    //         var res = await apiClient.ContactListAsync(1, _phoneBookPageSize);
    //         PhoneBookContact.Items.AddRange(res.Result);
    //         //get count from storage..
    //         var totalNoOfContactsInDB = await localStorage.GetItemAsync<int>("totalNoContactsInDB");
    //         if (totalNoOfContactsInDB > PhoneBookContact.Count)
    //         {
    //             //go fetch from database
                
    //         }
    //     }

    //     if (_activePhoneBookTab == PhoneBookTabs.BULK_FILES)
    //     {
    //         //get count from storage..
    //         var totalNoOfBulkFilesInDB = await localStorage.GetItemAsync<int>("totalNoOfBulkFilesInDB");
    //         if (totalNoOfBulkFilesInDB > _phoneBookPageSize)
    //         {
    //             //go fetch from database
    //             //fetch bulkfiles
    //             var res = await apiClient.BatchFileListAsync(null, _phoneBookPageSize, "txt");
    //             UserBulkFiles = res.Result;
    //         }

    //     }
    // }

    private void HandleSendNow()
    {

    }

    public enum PhoneBookTabs{
        CONTACTS,
        GROUPS,
        BULK_FILES
    }

} *@
