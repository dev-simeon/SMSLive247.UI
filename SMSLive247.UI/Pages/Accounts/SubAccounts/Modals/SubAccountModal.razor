<EditModal TItem="AccountResponse" Size="Modal.ModalSize.LARGE" @ref="editor" LabelText="Sub Account"
           OnCreate="OnCreate"
           OnUpdate="OnUpdate"
           OnDelete="OnDelete"
           OnCompleted="OnCompleted">
    <div class="alert alert-info" role="alert">
        Sub Account Name, Sender ID and Password are compulsory. All other fields are optional.
        The Prefix would be inserted at the beginning while the Suffix would be appended to the end of the message.
        You may request to receive notification for sent and failed messages by email.
    </div>
    <MultiColumn>
        <Column1>
            <FormInputText Label="Account Name" @bind-Value="model.AccountName" required disabled="@(editor.EditMode == EditModal<AccountResponse>.EditModeEnum.CREATE ? false : true)"></FormInputText>
            <FormField Label="Sender ID">
                <InputSelect class="form-select" @bind-Value="senderId">
                    <option value="">-- Select --</option>
                    @foreach (var item in senderIds)
                    {
                        <option value="@item.SenderID">@item.SenderID</option>
                    }
                </InputSelect>
            </FormField>
            <FormInputText Label="Callback URL" @bind-Value="callbackUrl"></FormInputText>
            <div class="form-check">
                <InputCheckbox class="form-check-input" id="active" @bind-Value="model.Active"></InputCheckbox>
                <label class="form-check-label" for="active">Active</label>
            </div>
        </Column1>
        <Column2>
            <FormInputText Label="Suffix" @bind-Value="suffix"></FormInputText>
            <FormInputText Label="Prefix" @bind-Value="prefix"></FormInputText>
            <FormInputText type="password" Label="Password" @bind-Value="password" required></FormInputText>
        </Column2>
    </MultiColumn>
</EditModal>

@code {
    [Parameter] public EventCallback OnCompleted { get; set; }
    private EditModal<AccountResponse> editor = new();
    private List<SenderIdResponse> senderIds = new();
    private string senderId = string.Empty;
    private string suffix = string.Empty;
    private string prefix = string.Empty;
    private string password = "";
    private string oldPassword = string.Empty;
    private string callbackUrl = string.Empty;
    private AccountResponse model => editor.Model;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await apiClient.SenderIdListAsync(1, 500, null);

            if (response.StatusCode == 200)
            {
                senderIds = response.Result.ToList();
            }
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    public void Show(AccountResponse? item = null) => editor.Show(item);

    public void Delete(AccountResponse account) => editor.Delete(account);

    private async Task OnCreate()
    {
        var request = new AccountCreateRequest
        {
            AccountName = model.AccountName,
             
            Password = password
        };

        await apiClient.AccountCreateAsync(request);
    }

    private async Task OnUpdate()
    {
        var updateRequest = new AccountUpdateRequest
        {
            Active = model.Active
        };

        await apiClient.AccountUpdateAsync(model.AccountID, updateRequest);
    }

    private async Task OnDelete()
    {
        var question = "Are you sure you want to delete this account?";
        bool confirmed = await alert.Confirm(question, "Confirm Deletion");

        if (confirmed)
        {
            await apiClient.AccountDeleteAsync(model.AccountID);
        }
    }
}
