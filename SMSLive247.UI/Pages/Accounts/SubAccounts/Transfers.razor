@using SMSLive247.UI.Pages.Accounts.SubAccounts.Modals
@using System.Net

<Card HeaderTitle="Transfer History">
    <Body>
        <SearchArea>
            <LeftRight>
                <Left>
                    <SearchBox @ref="searchBox" @onclick="() => ds.LoadData(alert)">
                        <InputSelect @bind-Value="subAccountId" class="form-select">
                            <option value="">-- select sub account --</option>
                            @foreach (var item in subAccounts)
                            {
                                <option value="@item.AccountID">@item.AccountName</option>
                            }
                        </InputSelect>
                    </SearchBox>
                </Left>
                <Right>
                    <Button Type="Button.Style.DEFAULT" @onclick="e => transferModal.Show()">
                        Transfer Credit
                    </Button>
                </Right>
            </LeftRight>
        </SearchArea>
        <Table DataSource="ds">
            <Columns>
                <Column Header="Date Created">
                    <FormatDate DateTime="@context.DateCreated"></FormatDate>
                </Column>
                <Column Header="Sender">
                    @context.SenderName
                </Column>
                <Column Header="Recipient">
                    @context.RecipientName
                </Column>
                <Column Header="SMS Value">
                    <FormatNumber Number="@context.Credits"></FormatNumber>
                </Column>
            </Columns>
        </Table>
    </Body>
    <Footer>
        <Pager PageState="ds.PageState" OnPageChange="e => ds.SetPage(e).LoadData(alert)" />
    </Footer>
</Card>

<TransferModal @ref="transferModal"></TransferModal>

@code {
    private SearchBox searchBox = new();
    private List<AccountResponse> subAccounts = [];
    private string subAccountId = "";
    private TransferModal transferModal = new();
    private ApiDataSource<TransferResponse> ds = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSubAccounts();

        ds.Callback = new(async (PageState p, FilterState? f) =>
        {
            var account = subAccounts.FirstOrDefault(x => x.AccountID == subAccountId);

            if(account != null)
            {
                return await subClient.Impersonate(account).TransferListAsync(p.PageNumber, p.PageSize, searchBox.Text);
            }
            return new SwaggerResponse<ICollection<TransferResponse>>(
               (int)HttpStatusCode.NotFound,
               new Dictionary<string, IEnumerable<string>>(),
               Array.Empty<TransferResponse>());
        });
        await ds.LoadData(alert);
    }

    private async Task LoadSubAccounts()
    {
        try
        {
            var response = await apiClient.AccountsListAsync(1, 500, searchBox.Text);
            if (response.StatusCode == 200)
            {
                subAccounts = response.Result.ToList();
            }
        }
        catch (Exception ex)
        {
            await alert.Error($"Error occurred while fetching sub account. Error: {ex.Message}", "Error");
        }
    }
}