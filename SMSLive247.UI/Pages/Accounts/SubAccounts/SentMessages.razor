@using SMSLive247.UI.Pages.Messaging.Messages.Modals

<Card HeaderTitle="Sent Messages">
    <Body>
        <SearchArea>
            <LeftRight>
                <Left>
                    <SearchBox @ref="searchBox" @onclick="e => ds.LoadData(alert)">
                        <InputSelect @bind-Value="subAccountId" class="form-select">
                            <option>--select sub account--</option>
                            @foreach (var item in subAccounts)
                            {
                                <option value="@item.AccountID">@item.AccountName</option>
                            }
                        </InputSelect>

                        <InputSelect @bind-Value="dateRange.Filter" class="form-select">
                            @foreach (var item in Enum.GetValues<DateRangeFilter>())
                            {
                                <option value="@item">@item</option>
                            }
                        </InputSelect>

                        @if (dateRange.Filter == DateRangeFilter.CUSTOM)
                        {
                            <InputDate class="form-control" @bind-Value:format="dd-MM-yyyy" @bind-Value="dateRange.StartDate"></InputDate>
                            <InputDate class="form-control" @bind-Value:format="dd-MM-yyyy" @bind-Value="dateRange.EndDate"></InputDate>
                        }
                    </SearchBox>
                </Left>
                <Right>
                    <Button Type="Button.Style.DOWNLOAD" @onclick="e => downloadModal.Download()">
                        Download...
                    </Button>
                </Right>
            </LeftRight>
        </SearchArea>
        <Table DataSource="ds">
            <Columns>
                <Column Header="Time">
                    <FormatDate DateTime="@context.DateSubmitted"></FormatDate><br />
                    <span class="badge text-bg-@GetStatusCssColor(context.Status)">@context.Status</span>
                </Column>
                <Column Header="Sender">
                    @context.SenderID.ToUpper()
                </Column>
                <Column Header="Message" Width="50%">
                    @context.MessageText.Left(160)
                    <small class="text-muted">@context.MessageParts Page (@context.MessageText.Length)</small>
                </Column>
                <Column Header="Delivery Report">
                    <small class="text-muted">
                        @context.TotalProcessed / @(context.TotalProcessed + context.TotalFailed)
                    </small><br />
                    <small class="text-muted">
                        <em>Credits:</em> @context.CreditsCharged.ToString("#,##0.00")
                    </small>
                </Column>
                <Column Header="">
                    <Actions OnView="() => messageView.Show((int)context.BatchID)"
                             OnDelete="() => messageModal.Delete(context)">
                    </Actions>
                </Column>
            </Columns>
        </Table>
    </Body>
    <Footer>
        <Pager PageState="ds.PageState" OnPageChange="e => ds.SetPage(e).LoadData(alert)" />
    </Footer>
</Card>

<SentMessageModal @ref="messageModal" OnCompleted="ReloadData"></SentMessageModal>
<SentMessageView @ref="messageView"></SentMessageView>
<DownloadModal @ref="downloadModal"></DownloadModal>

@code {
    private SearchBox searchBox = new();
    private DateRange dateRange = new();

    private DownloadModal downloadModal = new();
    private SentMessageModal messageModal = new();
    private SentMessageView messageView = new();

    private ApiDataSource<SmsBatchResponse> ds = new();
    private List<AccountResponse> subAccounts = [];
    private string? subAccountId;

    protected override async Task OnInitializedAsync()
    {
        subAccounts = await LoadSubAccounts();

        ds.Callback = new(async (PageState p, FilterState? f) =>
        {
            var account = subAccounts.FirstOrDefault(x => x.AccountID == subAccountId);

            if (account != null)
            {
                return await subClient.Impersonate(account).SmsBatchListAsync(
                    p.PageNumber, p.PageSize, dateRange.StartDate, dateRange.EndDate, searchBox.Text);
            }
            return ds.EmptyResponse;
        });
        await ds.LoadData(alert);
    }

    private async Task<List<AccountResponse>> LoadSubAccounts()
    {
        try
        {
            var response = await apiClient.AccountsListAsync(1, 500, null);

            if (response.StatusCode == 200)
                return response.Result.ToList();
        }
        catch { }
        return [];
    }

    private string GetStatusCssColor(string status) => status switch
    {
        "COMPLETED" => "success",
        "RUNNING" => "info",
        "PAUSED" => "warning",
        "ABORTED" => "danger",
        _ => "dark",
    };

    private async Task ReloadData() => await ds.LoadData(alert);
}
