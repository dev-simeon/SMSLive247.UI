@using SMSLive247.UI.Pages.Accounts.SubAccounts.Modals

<Card HeaderTitle="Sub Account">
    <Body>
        <SearchArea>
            <LeftRight>
                <Left>
                    <SearchBox @ref="searchBox" @onclick="e => ds.LoadData(alert)">
                    </SearchBox>
                </Left>
                <Right>
                    <Button Type="Button.Style.DOWNLOAD" @onclick="e => subAccount.Show()">
                        Create Sub Account
                    </Button>
                </Right>
            </LeftRight>
        </SearchArea>
        <Table DataSource="ds">
            <Columns>
                <Column Header="Date Created">
                    <FormatDate DateTime="@context.DateCreated"></FormatDate>
                </Column>
                <Column Header="Sub-Account Name">
                    @context.AccountName
                </Column>
                <Column Header="Balance">
                    @context.Credits.ToString("#,##0.00")
                </Column>
                <Column Header="Status">
                    @if (context.Active)
                    {
                        <span class="badge text-bg-success">ACTIVE</span>
                    }
                    else
                    {
                        <span class="badge text-bg-success">INACTIVE</span>
                    }
                </Column>
                <Column Header="Account ID">
                    @context.AccountID
                </Column>
                <Column Header="">
                    <Actions OnView="e => subAccount.Show(context)"
                             OnDelete="e => subAccount.Delete(context)">
                    </Actions>
                </Column>
            </Columns>
        </Table>
    </Body>
    <Footer>
        <Pager PageState="ds.PageState" OnPageChange="e => ds.SetPage(e).LoadData(alert)" />
    </Footer>
</Card>

<SubAccountModal @ref="subAccount" OnCompleted="FetchData"></SubAccountModal>

@code {
    private SearchBox searchBox = new();
    private SubAccountModal subAccount = new();
    private ApiDataSource<AccountResponse> ds = new();
    private string accountStatus = "";

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
       ds.Callback = new((PageState p, FilterState? f) =>
       {
           return apiClient.AccountsListAsync(p.PageNumber, p.PageSize, "self"/* , searchBox.Text */);
       });
        await ds.LoadData(alert);
    }

}
