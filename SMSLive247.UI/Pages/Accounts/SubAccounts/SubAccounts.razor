@using SMSLive247.UI.Pages.Accounts.SubAccounts.Modals
@using SMSLive247.UI.Pages.Accounts.Components

<Card HeaderTitle="Sub Account">
    <Body>
        <SearchArea>
            <LeftRight>
                <Left>
                    <SearchBox @ref="searchBox" @onclick="e => ds.LoadData(alert)">
                    </SearchBox>
                </Left>
                <Right>
                    <Button Type="Button.Style.ADD" @onclick="e => subAccountModal.Show()">
                        Add Sub Account...
                    </Button>
                </Right>
            </LeftRight>
        </SearchArea>
        <Table DataSource="ds">
            <Columns>
                <Column Header="Date Created">
                    <FormatDate DateTime="@context.DateCreated"></FormatDate>
                </Column>
                <Column Header="Sub-Account Name">
                    <SubAccountName Name="@context.AccountName"></SubAccountName>
                </Column>
                <Column Header="Balance">
                    <FormatNumber Number="@context.Credits"></FormatNumber>
                </Column>
                <Column Header="Account ID">
                    @context.AccountID
                </Column>
                <Column Header="Status">
                    @if (context.Active)
                    {
                        <span class="badge text-bg-success">ACTIVE</span>
                    }
                    else
                    {
                        <span class="badge text-bg-error">INACTIVE</span>
                    }
                </Column>
                <Column Header="">
                    <Actions OnEdit="e => subAccountModal.Show(context)"
                             OnView="e => subAccountModal.Show(context)"
                             OnDelete="e => subAccountModal.Delete(context)">
                    </Actions>
                </Column>
            </Columns>
        </Table>
    </Body>
    <Footer>
        <Pager PageState="ds.PageState" OnPageChange="e => ds.SetPage(e).LoadData(alert)" />
    </Footer>
</Card>

<SubAccountModal @ref="subAccountModal" OnCompleted="e => ds.LoadData(alert)"></SubAccountModal>

@code {
    private SearchBox searchBox = new();
    private SubAccountModal subAccountModal = new();
    private ApiDataSource<AccountResponse> ds = new();

    protected override async Task OnInitializedAsync()
    {
        ds.Callback = new((PageState p, FilterState? f) =>
        {
            return apiClient.AccountsListAsync(p.PageNumber, p.PageSize, searchBox.Text);
        });
        await ds.LoadData(alert);
    }
}
