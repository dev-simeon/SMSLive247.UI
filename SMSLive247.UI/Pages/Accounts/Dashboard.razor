@page "/"
@page "/Accounts/Dashboard"
@inject IJSRuntime js
@attribute [Authorize]
@using SMSLive247.UI.Pages.Accounts.Components

<PageTitle>SMSLive247 - Dashboard</PageTitle>
<Title>Welcome, @account.FirstName</Title>

<div class="row mt-4">
    <div class="col-md-3">
        <SmallCard 
            Caption="Wallet Balance" 
            Value="N 6,134.39" 
            Icon="fa fa-wallet">
        </SmallCard>
    </div>
    <div class="col-md-3">
        <SmallCard 
            Caption="SMS Credit Balance" 
            Value="@account.Credits.ToString("#,###")" 
            Icon="fa fa-coins">
        </SmallCard>
    </div>
    <div class="col-md-3">
        <SmallCard 
            Caption="Total SMS Sent Today"
            Value="@totalSmsSent.ToString("#,###")" 
            Icon="fa fa-envelope-open">
        </SmallCard>
    </div>
    <div class="col-md-3">
        <SmallCard 
            Caption="Total Batch Files"
                   Value="@batchFiles.Count.ToString("#,###")"
                   Icon="fa fa-folder-open">
        </SmallCard>
    </div>
</div>

<div class="row mt-5">
    <div class="col-md-6">
        <Card HeaderTitle="Messages Delivery Summary">
            <Body>
                <div id="summaryChart"></div>
            </Body>
        </Card>
    </div>
    <div class="col-md-6">
        <Card HeaderTitle="Recent Purchases">
            <Body>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Channel</th>
                            <th>Quantity</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in recentPurchases)
                        {
                            <tr>
                                <td><FormatDate DateTime="@p.DateCreated"></FormatDate></td>
                                <td>@p.ProviderID</td>
                                <td><FormatNumber Number="@p.Quantity"></FormatNumber></td>
                                <td><FormatNumber Currency="@p.Amount"></FormatNumber></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
        </Card>
    </div>
</div>

@code {
    private AccountResponse account = new();
    private List<BatchFileResponse> batchFiles = [];
    private List<SmsBatchResponse> recentMessages =[];
    private List<PurchaseResponse> recentPurchases = [];
    private long totalSmsSent = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var dateFrom = DateTimeOffset.UtcNow.Date.AddMonths(-12);
            var dateTo = DateTimeOffset.UtcNow.Date.AddDays(1).AddTicks(-1);

            var t1 = apiClient.AccountGetAsync("self");
            var t2 = apiClient.SmsBatchListAsync(1, 500, dateFrom, dateTo, null);
            var t5 = apiClient.PurchaseListAsync(1, 8, null);
            var t6 = apiClient.BatchFileListAsync();

            await Task.WhenAll(t1, t2, t5, t6);

            account = t1.Result.Result;
            recentMessages = t2.Result.Result.ToList();
            recentPurchases = t5.Result.Result.ToList();
            batchFiles = t6.Result.Result.ToList();

            totalSmsSent = recentMessages.Sum(x => x.TotalProcessed);

            await RenderDeliveryStatistics(recentMessages);
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private ValueTask RenderDeliveryStatistics(List<SmsBatchResponse> messages)
    {
        var groupedMessages = messages
            .GroupBy(m => m.DateSubmitted.Date)
            .Select(g => new
            {
                Date = g.Key,
                TotalSuccessful = g.Sum(m => m.TotalProcessed - m.TotalFailed),
                TotalFailed = g.Sum(m => m.TotalFailed)
            })
            .OrderBy(g => g.Date)
            .ToList();

        var successSeriesData = groupedMessages.Select(g => g.TotalSuccessful).ToArray();
        var failedSeriesData = groupedMessages.Select(g => g.TotalFailed).ToArray();
        var categories = groupedMessages.Select(g => g.Date.ToString("dd MMM")).ToArray();

        var options = new
        {
            chart = new
            {
                type = "bar"
            },
            plotOptions = new
            {
                bar = new
                {
                    colors = new
                    {
                        backgroundBarColors = new[] { "#F0F0F0" },
                        backgroundBarOpacity = 1,
                    }
                }
            },
            colors = new[] { "#F15B46", "#FF4560" }, // Colors for received and failed messages
            series = new[]
            {
            new { name = "Successful Messages", data = successSeriesData },
            new { name = "Failed Messages", data = failedSeriesData }
        },
            xaxis = new
            {
                categories
            }
        };

        return js.InvokeVoidAsync("apexChartsInterop.renderChart", "summaryChart", options);
    }
}

<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script>
    window.apexChartsInterop = {
        renderChart: function (elementId, options) {
            var chart = new ApexCharts(document.querySelector("#" + elementId), options);
            chart.render();
        }
    };
</script>
