@page "/Accounts/Dashboard"
@attribute [Authorize]
@inject IJSRuntime js

<PageTitle>Dashboard</PageTitle>

<h3 class="mb-3">Welcome, @accountDetail.LastName</h3>

<!-- Account Overview -->
<div class="row">
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="text-muted fw-medium">Wallet Balance</p>
                        <h4 class="mb-0">$ 6134.39</h4>
                    </div>
                    <div class="flex-shrink-0 align-self-center">
                        <div class="p-3 rounded-circle bg-primary">
                            <i class="fa fa-wallet h3 mb-0 text-white"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="text-muted fw-medium">SMS Credit Balance</p>
                        <h4 class="mb-0">C @accountDetail.Credits.ToString("F2")</h4>
                    </div>
                    <div class="flex-shrink-0 align-self-center">
                        <div class="p-3 rounded-circle bg-primary">
                            <i class="bi bi-coin h3 mb-0 text-white"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="text-muted fw-medium">Total SMS Sent (Today)</p>
                        <h4 class="mb-0">@totalSmsSent</h4>
                    </div>
                    <div class="flex-shrink-0 align-self-center">
                        <div class="p-3 rounded-circle bg-primary">
                            <i class="bi bi-chat-dots h3 mb-0 text-white"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <p class="text-muted fw-medium">Total Batch File</p>
                        <h4 class="mb-0">@batchFiles.Count</h4>
                    </div>
                    <div class="flex-shrink-0 align-self-center">
                        <div class="p-3 rounded-circle bg-primary">
                            <i class="bi bi-file-earmark-arrow-down h3 mb-0 text-white"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-6">
        <Card HeaderTitle="Messages Delivery Rates">
            <Body>
                <div id="trafficSummaryChart"></div>
            </Body>
        </Card>
    </div>
    <div class="col-md-6">
        <Card HeaderTitle="Recent Transactions">
            <Body>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Description</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in recentTransactions)
                        {
                            <tr>
                                <td><FormatDate DateTime="@transaction.DateCreated"></FormatDate></td>
                                <td>@transaction.Reference</td>
                                <td>@transaction.Amount</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
        </Card>
    </div>
</div>

@code {
    private AccountResponse accountDetail = new();
    private List<SmsBatchResponse> messagesSentToday =[];
    private List<ContactResponse> contacts = [];
    private List<GroupResponse> groups = [];
    private List<PurchaseResponse> recentTransactions = [];
    private List<BatchFileResponse> batchFiles = [];
    private int totalSmsSent = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var t1 = apiClient.AccountGetAsync("self");
            var dateFrom = DateTimeOffset.UtcNow.Date.AddMonths(-12);
            var dateTo = DateTimeOffset.UtcNow.Date.AddDays(1).AddTicks(-1);
            var t2 = apiClient.SmsBatchListAsync(1, 500, dateFrom, dateTo, null);
            var t3 = apiClient.ContactListAsync();
            var t4 = apiClient.GroupListAsync();
            var t5 = apiClient.PurchaseListAsync(1, 8);
            var t6 = apiClient.BatchFileListAsync();


            await Task.WhenAll(t1, t2, t3, t4, t5, t6);

            accountDetail = t1.Result.Result;
            messagesSentToday = t2.Result.Result.ToList();
            contacts = t3.Result.Result.ToList();
            groups = t4.Result.Result.ToList();
            recentTransactions = t5.Result.Result.ToList();
            batchFiles = t6.Result.Result.ToList();

            totalSmsSent = messagesSentToday.Count;

            await RenderDeliveryStatistics(messagesSentToday);
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private async Task RenderDeliveryStatistics(List<SmsBatchResponse> messages)
    {
        var groupedMessages = messages
            .GroupBy(m => m.DateSubmitted.Date)
            .Select(g => new
            {
                Date = g.Key,
                TotalReceived = g.Sum(m => m.TotalProcessed),
                TotalFailed = g.Sum(m => m.TotalFailed)
            })
            .OrderBy(g => g.Date)
            .ToList();

        var receivedSeriesData = groupedMessages.Select(g => g.TotalReceived).ToArray();
        var failedSeriesData = groupedMessages.Select(g => g.TotalFailed).ToArray();
        var categories = groupedMessages.Select(g => g.Date.ToString("dd MMM")).ToArray();

        var options = new
        {
            chart = new
            {
                type = "bar"
            },
            plotOptions = new
            {
                bar = new
                {
                    colors = new
                    {
                        backgroundBarColors = new[] { "#F0F0F0" },
                        backgroundBarOpacity = 1,
                    }
                }
            },
            colors = new[] { "#F15B46", "#FF4560" }, // Colors for received and failed messages
            series = new[]
            {
            new { name = "Received Messages", data = receivedSeriesData },
            new { name = "Failed Messages", data = failedSeriesData }
        },
            xaxis = new
            {
                categories
            }
        };

        await js.InvokeVoidAsync("apexChartsInterop.renderChart", "trafficSummaryChart", options);
    }
}

<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script>
    window.apexChartsInterop = {
        renderChart: function (elementId, options) {
            var chart = new ApexCharts(document.querySelector("#" + elementId), options);
            chart.render();
        }
    };
</script>
