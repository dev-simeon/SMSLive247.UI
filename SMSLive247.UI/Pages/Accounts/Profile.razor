@page "/Accounts/Profile"
@attribute [Authorize]

@using SMSLive247.UI.Pages.Accounts.Modals

<PageTitle>SMSLive247 - Profile</PageTitle>

<div class="container py-5">
    <div class="card shadow border-0 rounded-4 overflow-hidden">
        <div class="card-body p-5">
            <!-- Profile Header -->
            <div class="text-center mb-5">
                <i class="bi bi-person-circle text-primary" style="font-size: 5rem;"></i>
                <h3 class="mt-3 mb-1 fw-bold">@account?.FirstName @account?.LastName</h3>
                <p class="text-muted mb-0">@account?.AccountName</p>
            </div>

            <!-- Profile Details -->
            <div class="row justify-content-center mb-5">
                <div class="col-lg-8">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="text-muted small">Account ID</label>
                            <div class="fw-semibold">@account?.AccountID</div>
                        </div>
                        <div class="col-md-6">
                            <label class="text-muted small">Phone</label>
                            <div class="fw-semibold">@account?.Phone</div>
                        </div>
                        <div class="col-md-6">
                            <label class="text-muted small">Country Code</label>
                            <div class="fw-semibold">+@account?.CountryCode</div>
                        </div>
                        <div class="col-md-6">
                            <label class="text-muted small">Time Zone</label>
                            <div class="fw-semibold">
                                GMT @((account?.TimeZone >= 0 ? "+" : "") + account?.TimeZone)
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="text-muted small">Default Route</label>
                            <div class="fw-semibold">@account?.Traffic</div>
                        </div>
                        <div class="col-md-6">
                            <label class="text-muted small">Sender ID</label>
                            <div class="fw-semibold">@account?.SenderID</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Account Stats -->
            <div class="row text-center border-top pt-4 mt-4">
                <div class="col-md-6 mb-4 mb-md-0">
                    <label class="text-muted small d-block mb-1">Wallet Balance</label>
                    <h4 class="fw-bold text-dark">N x,xxx.00</h4>
                </div>
                <div class="col-md-6">
                    <label class="text-muted small d-block mb-1">Credit Balance</label>
                    <h4 class="fw-bold text-dark">@account?.Credits.ToString("#,##0.00")</h4>
                </div>
            </div>

            <!-- Actions -->
            <div class="text-center mt-5">
                <button type="button" class="btn btn-primary px-4 me-2" @onclick="e => profileModal.show()">
                    <i class="bi bi-pencil-square me-1"></i> Edit Profile
                </button>
                <button type="button" class="btn btn-outline-secondary px-4" @onclick="e => passwordModal.Show()">
                    <i class="bi bi-lock me-1"></i> Change Password
                </button>
            </div>
        </div>
    </div>
</div>

@if (account is not null)
{
    <ProfileInfoModal @ref="profileModal" account="account" OnCompleted="FetchData"></ProfileInfoModal>
    <ChangePasswordModal @ref="passwordModal" account="account"></ChangePasswordModal>
}

@code {
    private ProfileInfoModal profileModal = new();
    private ChangePasswordModal passwordModal = new();

    private AccountResponse? account;

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        try
        {
            var response = await apiClient.AccountGetAsync("self");

            if (response.StatusCode == 200)
                account = response.Result;
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }
}