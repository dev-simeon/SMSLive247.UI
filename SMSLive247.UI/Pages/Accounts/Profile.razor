@using SMSLive247.UI.Pages.Accounts.SubAccounts.Modals
@page "/Accounts/Profile"
@attribute [Authorize]

<PageTitle>SMSLive247 - Profile</PageTitle>
<Title>My Profile</Title>

<Card>
    <Body>
        <MultiColumn Column1Width="4" Column2Width="8">
            <Column1>
                <div class="card">
                    <div class="card-body">
                        <div>
                            <div class="mb-3">
                                <i class="bi bi-person-circle h1 text-primary"></i>
                            </div>
                            <div>
                                <h5 class="mb-0">@account.LastName @account.FirstName</h5>
                                <p class="text-muted mb-0">@account.Email</p>
                                <p class="text-muted mb-0">@account.Email</p>
                                <p class="text-muted mb-0">@account.Phone</p>
                                <p class="text-muted mb-0">+@account.CountryCode [GMT + @account.TimeZone]</p>
                            </div>
                        </div>
                    </div>

                    <div class="card-body border-top">
                        <div class="row">
                            <div class="col-sm-6">
                                <div>
                                    <p class="fw-medium mb-2">Wallet Balance:</p>
                                    <h4>N 6,134.39</h4>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div>
                                    <p class="fw-medium mb-2">SMS Credit Balance:</p>
                                    <h4>C @account.Credits.ToString("#,##0")</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </Column1>
            <Column2>
                <div class="alert alert-info mb-3">
                    Setup a default SenderID here. Note that you can override this when actually sending.
                    The signature text is appended to the end of every message. Delivery email receives
                    failure reports for bulk sending.
                </div>
                <StaticText Label="Sender ID" Text="@senderId"></StaticText>
                <StaticText Label="Delivery Email" Text="@account.AccountID"></StaticText>
                <StaticText Label="Signature" Text="@signature"></StaticText>
                @{
                    string sign = account.TimeZone > 0 ? "+" : "-";
                    string timeZone = $"GMT {sign}{account.TimeZone}";
                }
                <StaticText Label="TimeZone" Text="@timeZone"></StaticText>
            </Column2>
        </MultiColumn>
    </Body>
    <Footer>
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-primary" @onclick="() => profileModal.show()">
                Edit Basic Info...
            </button>
            <button type="button" class="btn btn-outline-primary" @onclick="() => passwordModal.Show()">
                Change Password...
            </button>
            <button type="button" class="btn btn-outline-primary" @onclick="e => settingsModal.Show(account)">
                Edit Settings...
            </button>
        </div>
    </Footer>
</Card>


<ProfileInfoModal @ref="profileModal" account="account" OnCompleted="FetchData"></ProfileInfoModal>
<ChangePasswordModal @ref="passwordModal" account="account"></ChangePasswordModal>
<SettingsModal @ref="settingsModal"></SettingsModal>

@code {
    private AccountResponse account = new();
    private ProfileInfoModal profileModal = new();
    private ChangePasswordModal passwordModal = new();
    private SettingsModal settingsModal = new();
    private string signature = "";
    private string senderId = "";

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        try
        {
            var response = await apiClient.AccountGetAsync("self");

            if (response.StatusCode == 200)
                account = response.Result;
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }
}
