@inject AuthenticationStateProvider auth
@inject Settings settings;
@inject IJSRuntime js

<Modal Title="Buy SMS Credits" @bind-Hidden="hideModal" VAlign="Modal.ModalVAlign.CENTER">
    <Body>
        @if (price != null)
        {
            <StaticText Label="Unit Price" Text="@("₦" + price.Price.ToString())" />
            <StaticText Label="Purchase Amount" Text="@("₦" + price.Amount.ToString())" />
            <StaticText Label="SMS Quantity" Text="@price.Quantity.ToString()" />
            <StaticText Label="Transaction Fee" Text="@("₦" + ((decimal)price.Amount * 0.015M).ToString("#,##0.00"))" />
            <StaticText Label="Total Amount" Text="@("₦" + ((decimal)price.Amount + (decimal)price.Amount * 0.015M).ToString("#,##0.00"))" />
        }
        else
        {
            <div class="alert alert-info" role="alert">
                Minimum SMS credit quantity to purchase is 500 sms credit.
            </div>
            <EditForm Model="quantity" OnValidSubmit="ConfirmPrice">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <FormInputNumber Label="SMS Quantity" @bind-Value="quantity"></FormInputNumber>
            </EditForm>
        }
    </Body>
    <Footer>
        @if (price != null)
        {
            <Button Type="Button.Style.DEFAULT" @onclick="ConfirmPurchase">Pay with Paystack</Button>
            <Button Type="Button.Style.CANCEL" @onclick="CancelConfirmation">Cancel</Button>
        }
        else
        {
            <Button Type="Button.Style.DEFAULT" @onclick="ConfirmPrice">Confirm Price</Button>
        }
    </Footer>
</Modal>

@code {
    private bool hideModal = true;
    private PriceCalcResponse? price;
    private string email = "";
    private long quantity = 100;

    protected override async Task OnInitializedAsync()
    {
        var member = await ((Authentication.SmsAuthProvider)auth).GetMember();

        if (member == null)
        {
            await alert.Error("Please re-login", "Error");
            return;
        }

        email = member.Email;
    }

    public void Show()
    {
        hideModal = false;
        StateHasChanged();
    }

    private void CancelConfirmation()
    {
        price = null;
    }

    private async Task ConfirmPrice()
    {
        try
        {
            var response = await apiClient.PriceCalculateAsync(null, quantity);

            if (response.StatusCode == 200)
            {
                price = response.Result;
                return;
            }
            throw new Exception("apiClient.PurchaseBeginAsync() Failed");
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private async Task ConfirmPurchase()
    {
        try
        {
            if (price == null)
                throw new Exception("Confirm the price first");

            // Get the total amount including the transaction fee
            var totalAmount = (decimal)price.Amount + (decimal)price.Amount * 0.015M;

            var request = new PurchaseRequest { ProviderID = "PAYSTACK", Quantity = quantity };
            var response = await apiClient.PurchaseBeginAsync(request);

            if (response.StatusCode != 200)
                throw new Exception("apiClient.PurchaseBeginAsync() Failed");

            await js.InvokeVoidAsync("paystackPopup", response.Result.AccessCode);
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
        finally
        {
            hideModal = true;
        }
    }

    [JSInvokable]
    private async Task CompletePurchase(string reference)
    {
        try
        {
            await apiClient.PurchaseCompleteAsync(reference);
        }
        catch (Exception ex)
        {
            await HandleError(ex.Message);
        }
    }

    [JSInvokable]
    private async Task HandleError(string errorMessage)
    {
        await alert.Error(errorMessage, "Error");
    }

}

<script src="https://js.paystack.co/v2/inline.js"></script>
<script>
    function paystackPopup(accessCode) {
        const popup = new PaystackPop();
        popup.resumeTransaction({
            access_code: accessCode,
            onSuccess: async function (transaction) {
                console.log("Transaction successful:", transaction);
                try {
                    await DotNet.invokeMethodAsync('PurchaseModal', 'CompletePurchase', transaction.reference);
                } catch (error) {
                    console.error("Error completing purchase:", error);
                }
            },
            onCancel: async function () {
                try {
                    await DotNet.invokeMethodAsync('PurchaseModal', 'HandleError', 'Transaction was canceled.');
                } catch (error) {
                    console.error("Error handling cancelation:", error);
                }
            },
            onError: async function (error) {
                console.error("Transaction error:", error);
                try {
                    await DotNet.invokeMethodAsync('PurchaseModal', 'HandleError', error.message);
                } catch (err) {
                    console.error("Error handling error:", err);
                }
            }
        });
    }

</script>
