@inject AuthenticationStateProvider auth

<Modal Title="Buy SMS Credits" Hidden="@(!showModal)" VAlign="Modal.ModalVAlign.CENTER">
    <Body>
        @if (showConfirmation)
        {
            <StaticText Label="Unit Price" Text="@("₦" + purchaseResponse.Price.ToString())" />
            <StaticText Label="Purchase Amount" Text="@("₦" + purchaseResponse.Amount.ToString())" />
            <StaticText Label="SMS Quantity" Text="@purchaseResponse.Quantity.ToString()" />
            <StaticText Label="Transaction Fee" Text="@("₦" + ((decimal)purchaseResponse.Amount * 0.015M).ToString("#,##0.00"))" />
            <StaticText Label="Total Amount" Text="@("₦" + ((decimal)purchaseResponse.Amount + (decimal)purchaseResponse.Amount * 0.015M).ToString("#,##0.00"))" />
        }
        else
        {
            <EditForm Model="purchaseRequest" OnValidSubmit="BeginPurchase">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <FormInputNumber Label="SMS Quantity" @bind-Value="purchaseRequest.Amount"></FormInputNumber>
            </EditForm>
        }
    </Body>
    <Footer>
        @if (showConfirmation)
        {
            <Button Type="Button.Style.DEFAULT" @onclick="ConfirmPurchase">Confirm</Button>
            <Button Type="Button.Style.CANCEL" @onclick="CancelConfirmation">Cancel</Button>
        }
        else
        {
            <button type="submit" class="btn btn-primary" @onclick="BeginPurchase" disabled="@(purchaseRequest.Amount <= 1000)">Buy Credits</button>
            <Button Type="Button.Style.CANCEL" @onclick="ToggleModal">Cancel</Button>
        }
    </Footer>
</Modal>

@code {
    private bool showModal = false;
    private bool showConfirmation = false;
    private PurchaseRequest purchaseRequest = new PurchaseRequest { ProviderID = "PYSTK" };
    private PurchaseResponse purchaseResponse = new PurchaseResponse();
    private string? email;

    public void Show()
    {
        showModal = true;
        showConfirmation = false;
        StateHasChanged();
    }

    private void ToggleModal()
    {
        showModal = !showModal;
        StateHasChanged();
    }

    private void CancelConfirmation()
    {
        showConfirmation = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var member = await ((Authentication.SmsAuthProvider)auth).GetMember();

        if (member != null)
        {
            email = member.Email?.ToLower();
        }
    }

    private async Task BeginPurchase()
    {
        try
        {
            var task = await apiClient.PurchaseBeginAsync(purchaseRequest);

            if (task.StatusCode == 200)
            {
                purchaseResponse = task.Result;
                showConfirmation = true;
            }
            else
            {
                await alert.Error("Failed to initialize purchase.", "Error");
            }
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task ConfirmPurchase()
    {
        try
        {
            // Initialize the payment transaction with Paystack
            var callbackUrl = nav.ToAbsoluteUri($"/Wallet/PaymentComplete").ToString()
                ?? throw new InvalidOperationException("Callback URL is invalid");

            var totalAmount = (decimal)purchaseResponse.Amount + (decimal)purchaseResponse.Amount * 0.015M;

            var result = await paystack.InitializeTransaction(email, totalAmount, callbackUrl, purchaseResponse.Reference);

            // Redirect the user to Paystack for payment
            nav.NavigateTo(result.AuthorizationUrl);
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
        finally
        {
            showModal = false;
            StateHasChanged();
        }
    }
}