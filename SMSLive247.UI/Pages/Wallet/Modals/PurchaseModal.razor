@inject AuthenticationStateProvider auth
@inject Settings settings;
@inject IJSRuntime js

<Modal Title="Buy SMS Credits" @bind-Hidden="hideModal" VAlign="Modal.ModalVAlign.CENTER">
    <Body>
        <div class="alert alert-info" role="alert">
            Minimum SMS credit quantity to purchase is 500 sms credit.
        </div>
        @if (price != null)
        {
            <StaticText Label="SMS Quantity" Text="@price.Quantity.ToString("#,##0")" />
            <StaticText Label="Unit Price" Text="@(price.Price.ToString("₦ #,##0.00"))" />
            <StaticText Label="Purchase Amount" Text="@(price.Amount.ToString("₦ #,##0.00"))" />
            <StaticText Label="Transaction Fee" Text="@(price.Fee.ToString("₦ #,##0.00"))" />
            <StaticText Label="Total Amount" Text="@((price.Amount + price.Fee).ToString("₦ #,##0.00"))" />
        }
        else
        {
            <EditForm Model="quantity" OnValidSubmit="ConfirmPrice">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <FormInputNumber Label="SMS Quantity" @bind-Value="quantity"></FormInputNumber>
            </EditForm>
        }
    </Body>
    <Footer>
        @if (price != null)
        {
            <Button Type="Button.Style.DEFAULT" @onclick="ConfirmPurchase">Pay with Paystack</Button>
            <Button Type="Button.Style.CANCEL" @onclick="CancelConfirmation">Cancel</Button>
        }
        else
        {
            <Button Type="Button.Style.DEFAULT" @onclick="ConfirmPrice">Confirm Price</Button>
        }
    </Footer>
</Modal>

@code {
    private bool hideModal = true;
    private PriceCalcResponse? price;
    private long quantity = 100;

    protected override async Task OnInitializedAsync()
    {
        var member = await ((Authentication.SmsAuthProvider)auth).GetMember();

        if (member == null)
            await alert.Error("Please re-login", "Error");
    }

    public void Show()
    {
        hideModal = false;
        StateHasChanged();
    }

    private void CancelConfirmation()
    {
        price = null;
    }

    private async Task ConfirmPrice()
    {
        try
        {
            var response = await apiClient.PriceCalculateAsync(null, quantity);

            if (response.StatusCode == 200)
            {
                price = response.Result;
                return;
            }
            throw new Exception("apiClient.PurchaseBeginAsync() Failed");
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private async Task ConfirmPurchase()
    {
        try
        {
            if (price == null)
                throw new Exception("Confirm the price first");

            // Get the total amount including the transaction fee
            var totalAmount = (decimal)price.Amount + (decimal)price.Amount * 0.015M;

            var request = new PurchaseRequest { ProviderID = "PAYSTACK", Quantity = quantity };
            var response = await apiClient.PurchaseBeginAsync(request);

            if (response.StatusCode != 200)
                throw new Exception("apiClient.PurchaseBeginAsync() Failed");

            var myRef = DotNetObjectReference.Create(this);
            await js.InvokeVoidAsync("paystackPopup", response.Result.AccessCode);

            // await js.InvokeVoidAsync("paystackPopup",
            //                           response.Result.AccessCode,
            //                           OnLoad, OnSuccess, OnCancel, OnError);
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
        finally
        {
            hideModal = true;
        }
    }



    [JSInvokable("OnLoad")]
    private void OnLoad(dynamic response)
    {
        //response.id             String  This is the transaction id
        //response.accessCode     String  This is a unique payment code used for creating the payment link and loading the Popup
        //response.customer       Object  The details of the customer making the payment
        
        Console.WriteLine(response);
    }

    [JSInvokable("OnSuccess")]
    private async Task OnSuccess(dynamic transaction)
    {
        //transaction.reference  String  This is the unique payment reference that can be used for reconciliation
        //transaction.status     String  The final state of the transaction
        //transaction.message    String  Complimentary note of the transaction status
        //transaction.transaction String  This is the transaction id
        
        try
        {
            await apiClient.PurchaseCompleteAsync(transaction.transaction);
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    [JSInvokable("OnCancel")]
    private void OnCancel()
    {
        Console.WriteLine("canceled");
    }

    [JSInvokable("OnError")]
    private Task OnError(dynamic error)
    {
        return alert.Error(error.message, "Error");
    }
}

<script src="https://js.paystack.co/v2/inline.js"></script>
<script>
    function paystackPopup(accessCode) {
        const popup = new PaystackPop();
        popup.resumeTransaction({
            access_code: accessCode,
            onSuccess: (transaction) => {
                alert(transaction);
            },
            onLoad: (response) => {
                alert("onLoad: ", response);
            },
            onCancel: () => {
                alert("onCancel");
            },
            onError: (error) => {
                alert("Error: ", error.message);
            }

            //onSuccess: async function (e) { alert('hello'); }
            //onCancel: on_cancel,
            //onError: on_error,
            //onload: on_load
        });
    }



    // function paystackPopup222(accessCode) {
    //     const popup = new PaystackPop();
    //     popup.resumeTransaction({
    //         access_code: accessCode,
    //         onSuccess: async function (transaction) {
    //             console.log("Transaction successful:", transaction);
    //             try {
    //                 await DotNet.invokeMethodAsync('PurchaseModal', 'OnSuccess', transaction.reference);
    //             } catch (error) {
    //                 console.error("Error completing purchase:", error);
    //             }
    //         },
    //         onCancel: async function () {
    //             try {
    //                 await DotNet.invokeMethodAsync('PurchaseModal', 'OnError', 'Transaction was canceled.');
    //             } catch (error) {
    //                 console.error("Error handling cancelation:", error);
    //             }
    //         },
    //         onError: async function (error) {
    //             console.error("Transaction error:", error);
    //             try {
    //                 await DotNet.invokeMethodAsync('PurchaseModal', 'OnError', error.message);
    //             } catch (err) {
    //                 console.error("Error handling error:", err);
    //             }
    //         }
    //     });
    // }
</script>
