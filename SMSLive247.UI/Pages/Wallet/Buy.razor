@page "/Wallet/Buy"
@attribute [Authorize]

<PageTitle>Buy SMS Credits</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="card mt-5">
                <div class="card-header">
                    <h3 class="card-title">Buy SMS Credits</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="purchaseRequest" OnValidSubmit="BuySms">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="providerID">Provider ID</label>
                            <InputText id="providerID" class="form-control" @bind-Value="purchaseRequest.ProviderID" />
                        </div>

                        <div class="form-group">
                            <label for="amount">Amount</label>
                            <InputNumber id="amount" class="form-control" @bind-Value="purchaseRequest.Amount" />
                        </div>

                        <button type="submit" class="btn btn-primary mt-3">Buy Credits</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PurchaseRequest purchaseRequest = new();
    private List<PurchaseResponse> purchaseList = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await apiClient.PurchaseListAsync(1, 500);

            if (response.StatusCode == 200)
            {
                purchaseList = response.Result.ToList();
            }
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }

    private async Task BuySms()
    {
        try
        {
            var task = await apiClient.PurchaseBeginAsync(purchaseRequest);

            if (task.StatusCode == 200)
            {
                var response = task.Result;
                // Initialize the payment transaction with Paystack
                var callbackUrl = nav.ToAbsoluteUri("/Wallet/Complete").ToString();
                var result = await paystack.InitializeTransaction(response.ProviderID, (decimal)response.Amount, callbackUrl, response.Reference);

                // Redirect the user to Paystack for payment
                nav.NavigateTo(result.AuthorizationUrl);
            }
            else
            {
                await alert.Error("Failed to initialize purchase.", "Error");
            }
        }
        catch (Exception ex)
        {
            await alert.Error(ex.Message, "Error");
        }
    }
}
